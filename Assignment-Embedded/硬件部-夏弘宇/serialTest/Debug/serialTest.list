
serialTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a50  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08002c34  08002c34  00012c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ed4  08002ed4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002ed4  08002ed4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ed4  08002ed4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ed4  08002ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ed8  08002ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000070  08002f4c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08002f4c  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069f0  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012ca  00000000  00000000  00026a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  00027d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00028380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d89  00000000  00000000  00028930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007710  00000000  00000000  000416b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000908e8  00000000  00000000  00048dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d96b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002018  00000000  00000000  000d9704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002c1c 	.word	0x08002c1c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002c1c 	.word	0x08002c1c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <u1_printf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void u1_printf(char* fmt, ...) {
 8000234:	b40f      	push	{r0, r1, r2, r3}
 8000236:	b580      	push	{r7, lr}
 8000238:	b0b4      	sub	sp, #208	; 0xd0
 800023a:	af00      	add	r7, sp, #0
  uint16_t len;
  va_list ap;
  va_start(ap, fmt);
 800023c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  uint8_t buf[200];
  vsprintf((char*)buf, fmt, ap);
 8000244:	463b      	mov	r3, r7
 8000246:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800024a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fbf8 	bl	8001a44 <vsiprintf>
  va_end(ap);
  len = strlen((char*)buf);
 8000254:	463b      	mov	r3, r7
 8000256:	4618      	mov	r0, r3
 8000258:	f7ff ffe4 	bl	8000224 <strlen>
 800025c:	4603      	mov	r3, r0
 800025e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
  HAL_UART_Transmit(&huart1, buf, len, HAL_MAX_DELAY);
 8000262:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8000266:	4639      	mov	r1, r7
 8000268:	f04f 33ff 	mov.w	r3, #4294967295
 800026c:	4804      	ldr	r0, [pc, #16]	; (8000280 <u1_printf+0x4c>)
 800026e:	f001 f943 	bl	80014f8 <HAL_UART_Transmit>
}
 8000272:	bf00      	nop
 8000274:	37d0      	adds	r7, #208	; 0xd0
 8000276:	46bd      	mov	sp, r7
 8000278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr
 8000280:	2000008c 	.word	0x2000008c

08000284 <process_input>:
    HAL_UART_Receive_IT(&huart1, &rxBuffer[rxIndex], 1);
  }
}

void process_input(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
  int a, b;
  if (sscanf((char*)rxBuffer, "%d %d", &a, &b) == 2)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	f107 0208 	add.w	r2, r7, #8
 8000290:	490e      	ldr	r1, [pc, #56]	; (80002cc <process_input+0x48>)
 8000292:	480f      	ldr	r0, [pc, #60]	; (80002d0 <process_input+0x4c>)
 8000294:	f001 fb94 	bl	80019c0 <siscanf>
 8000298:	4603      	mov	r3, r0
 800029a:	2b02      	cmp	r3, #2
 800029c:	d108      	bne.n	80002b0 <process_input+0x2c>
  {
    int sum = a + b;
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4413      	add	r3, r2
 80002a4:	60fb      	str	r3, [r7, #12]
    u1_printf("%d\r\n", sum);
 80002a6:	68f9      	ldr	r1, [r7, #12]
 80002a8:	480a      	ldr	r0, [pc, #40]	; (80002d4 <process_input+0x50>)
 80002aa:	f7ff ffc3 	bl	8000234 <u1_printf>
 80002ae:	e002      	b.n	80002b6 <process_input+0x32>
  }
  else
  {
    u1_printf("Invalid input. Please enter two integers separated by a space.\r\n");
 80002b0:	4809      	ldr	r0, [pc, #36]	; (80002d8 <process_input+0x54>)
 80002b2:	f7ff ffbf 	bl	8000234 <u1_printf>
  }
  rxIndex = 0;
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <process_input+0x58>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
  rxComplete = 0;
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <process_input+0x5c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	08002c44 	.word	0x08002c44
 80002d0:	200000d4 	.word	0x200000d4
 80002d4:	08002c4c 	.word	0x08002c4c
 80002d8:	08002c54 	.word	0x08002c54
 80002dc:	20000138 	.word	0x20000138
 80002e0:	20000139 	.word	0x20000139

080002e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e8:	f000 f9a8 	bl	800063c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ec:	f000 f828 	bl	8000340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f0:	f000 f890 	bl	8000414 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002f4:	f000 f860 	bl	80003b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  u1_printf("Enter two integers separated by a space:\r\n");
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <main+0x48>)
 80002fa:	f7ff ff9b 	bl	8000234 <u1_printf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HAL_UART_Receive_IT(&huart1, &rxBuffer[0], 1);
 80002fe:	2201      	movs	r2, #1
 8000300:	490b      	ldr	r1, [pc, #44]	; (8000330 <main+0x4c>)
 8000302:	480c      	ldr	r0, [pc, #48]	; (8000334 <main+0x50>)
 8000304:	f001 f983 	bl	800160e <HAL_UART_Receive_IT>
	  if (rxComplete) {
 8000308:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <main+0x54>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d005      	beq.n	800031c <main+0x38>
		  process_input();
 8000310:	f7ff ffb8 	bl	8000284 <process_input>
		   // 重新启动接收
		  u1_printf("Enter two integers separated by a space:\r\n");
 8000314:	4805      	ldr	r0, [pc, #20]	; (800032c <main+0x48>)
 8000316:	f7ff ff8d 	bl	8000234 <u1_printf>
 800031a:	e002      	b.n	8000322 <main+0x3e>
	  }
	  else {
		  u1_printf("Please input something!");
 800031c:	4807      	ldr	r0, [pc, #28]	; (800033c <main+0x58>)
 800031e:	f7ff ff89 	bl	8000234 <u1_printf>
	  }
	  HAL_Delay(500);
 8000322:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000326:	f000 f9eb 	bl	8000700 <HAL_Delay>
	  HAL_UART_Receive_IT(&huart1, &rxBuffer[0], 1);
 800032a:	e7e8      	b.n	80002fe <main+0x1a>
 800032c:	08002c98 	.word	0x08002c98
 8000330:	200000d4 	.word	0x200000d4
 8000334:	2000008c 	.word	0x2000008c
 8000338:	20000139 	.word	0x20000139
 800033c:	08002cc4 	.word	0x08002cc4

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b090      	sub	sp, #64	; 0x40
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	f107 0318 	add.w	r3, r7, #24
 800034a:	2228      	movs	r2, #40	; 0x28
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f001 fb2e 	bl	80019b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
 8000360:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000362:	2302      	movs	r3, #2
 8000364:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000366:	2301      	movs	r3, #1
 8000368:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036a:	2310      	movs	r3, #16
 800036c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800036e:	2300      	movs	r3, #0
 8000370:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000372:	f107 0318 	add.w	r3, r7, #24
 8000376:	4618      	mov	r0, r3
 8000378:	f000 fc5e 	bl	8000c38 <HAL_RCC_OscConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000382:	f000 f85d 	bl	8000440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000386:	230f      	movs	r3, #15
 8000388:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038a:	2300      	movs	r3, #0
 800038c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 fecc 	bl	800113c <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003aa:	f000 f849 	bl	8000440 <Error_Handler>
  }
}
 80003ae:	bf00      	nop
 80003b0:	3740      	adds	r7, #64	; 0x40
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <MX_USART1_UART_Init+0x50>)
 80003be:	4a13      	ldr	r2, [pc, #76]	; (800040c <MX_USART1_UART_Init+0x54>)
 80003c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_USART1_UART_Init+0x50>)
 80003c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_USART1_UART_Init+0x50>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d0:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <MX_USART1_UART_Init+0x50>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_USART1_UART_Init+0x50>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <MX_USART1_UART_Init+0x50>)
 80003de:	220c      	movs	r2, #12
 80003e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_USART1_UART_Init+0x50>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <MX_USART1_UART_Init+0x50>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ee:	4806      	ldr	r0, [pc, #24]	; (8000408 <MX_USART1_UART_Init+0x50>)
 80003f0:	f001 f832 	bl	8001458 <HAL_UART_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003fa:	f000 f821 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
  u1_printf("Initialized!\n");
 80003fe:	4804      	ldr	r0, [pc, #16]	; (8000410 <MX_USART1_UART_Init+0x58>)
 8000400:	f7ff ff18 	bl	8000234 <u1_printf>
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	2000008c 	.word	0x2000008c
 800040c:	40013800 	.word	0x40013800
 8000410:	08002cdc 	.word	0x08002cdc

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_GPIO_Init+0x28>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4a07      	ldr	r2, [pc, #28]	; (800043c <MX_GPIO_Init+0x28>)
 8000420:	f043 0304 	orr.w	r3, r3, #4
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <MX_GPIO_Init+0x28>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0304 	and.w	r3, r3, #4
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000

08000440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
}
 8000446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000448:	e7fe      	b.n	8000448 <Error_Handler+0x8>
	...

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <HAL_MspInit+0x40>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a0d      	ldr	r2, [pc, #52]	; (800048c <HAL_MspInit+0x40>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <HAL_MspInit+0x40>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <HAL_MspInit+0x40>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a07      	ldr	r2, [pc, #28]	; (800048c <HAL_MspInit+0x40>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <HAL_MspInit+0x40>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	40021000 	.word	0x40021000

08000490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a1c      	ldr	r2, [pc, #112]	; (800051c <HAL_UART_MspInit+0x8c>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d131      	bne.n	8000514 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004b0:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <HAL_UART_MspInit+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a1a      	ldr	r2, [pc, #104]	; (8000520 <HAL_UART_MspInit+0x90>)
 80004b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <HAL_UART_MspInit+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <HAL_UART_MspInit+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a14      	ldr	r2, [pc, #80]	; (8000520 <HAL_UART_MspInit+0x90>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <HAL_UART_MspInit+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e6:	2302      	movs	r3, #2
 80004e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ea:	2303      	movs	r3, #3
 80004ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	480b      	ldr	r0, [pc, #44]	; (8000524 <HAL_UART_MspInit+0x94>)
 80004f6:	f000 fa0b 	bl	8000910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	4619      	mov	r1, r3
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <HAL_UART_MspInit+0x94>)
 8000510:	f000 f9fe 	bl	8000910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000514:	bf00      	nop
 8000516:	3720      	adds	r7, #32
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40013800 	.word	0x40013800
 8000520:	40021000 	.word	0x40021000
 8000524:	40010800 	.word	0x40010800

08000528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800052c:	e7fe      	b.n	800052c <NMI_Handler+0x4>

0800052e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <HardFault_Handler+0x4>

08000534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <MemManage_Handler+0x4>

0800053a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <BusFault_Handler+0x4>

08000540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <UsageFault_Handler+0x4>

08000546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800056e:	f000 f8ab 	bl	80006c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000580:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <_sbrk+0x5c>)
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <_sbrk+0x60>)
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <_sbrk+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d102      	bne.n	800059a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <_sbrk+0x64>)
 8000596:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <_sbrk+0x68>)
 8000598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <_sbrk+0x64>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d207      	bcs.n	80005b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a8:	f001 f9d8 	bl	800195c <__errno>
 80005ac:	4603      	mov	r3, r0
 80005ae:	220c      	movs	r2, #12
 80005b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
 80005b6:	e009      	b.n	80005cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <_sbrk+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <_sbrk+0x64>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	4a05      	ldr	r2, [pc, #20]	; (80005dc <_sbrk+0x64>)
 80005c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ca:	68fb      	ldr	r3, [r7, #12]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000c000 	.word	0x2000c000
 80005d8:	00000400 	.word	0x00000400
 80005dc:	2000013c 	.word	0x2000013c
 80005e0:	20000158 	.word	0x20000158

080005e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f0:	f7ff fff8 	bl	80005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005f6:	490c      	ldr	r1, [pc, #48]	; (8000628 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005f8:	4a0c      	ldr	r2, [pc, #48]	; (800062c <LoopFillZerobss+0x16>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005fc:	e002      	b.n	8000604 <LoopCopyDataInit>

080005fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000602:	3304      	adds	r3, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000608:	d3f9      	bcc.n	80005fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060a:	4a09      	ldr	r2, [pc, #36]	; (8000630 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800060c:	4c09      	ldr	r4, [pc, #36]	; (8000634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000610:	e001      	b.n	8000616 <LoopFillZerobss>

08000612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000614:	3204      	adds	r2, #4

08000616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000618:	d3fb      	bcc.n	8000612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800061a:	f001 f9a5 	bl	8001968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061e:	f7ff fe61 	bl	80002e4 <main>
  bx lr
 8000622:	4770      	bx	lr
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800062c:	08002edc 	.word	0x08002edc
  ldr r2, =_sbss
 8000630:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000634:	20000154 	.word	0x20000154

08000638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC1_2_IRQHandler>
	...

0800063c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_Init+0x28>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <HAL_Init+0x28>)
 8000646:	f043 0310 	orr.w	r3, r3, #16
 800064a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064c:	2003      	movs	r0, #3
 800064e:	f000 f92b 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000652:	200f      	movs	r0, #15
 8000654:	f000 f808 	bl	8000668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000658:	f7ff fef8 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40022000 	.word	0x40022000

08000668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_InitTick+0x54>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_InitTick+0x58>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000682:	fbb2 f3f3 	udiv	r3, r2, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f935 	bl	80008f6 <HAL_SYSTICK_Config>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	e00e      	b.n	80006b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b0f      	cmp	r3, #15
 800069a:	d80a      	bhi.n	80006b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069c:	2200      	movs	r2, #0
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295
 80006a4:	f000 f90b 	bl	80008be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <HAL_InitTick+0x5c>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e000      	b.n	80006b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000008 	.word	0x20000008
 80006c4:	20000004 	.word	0x20000004

080006c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_IncTick+0x1c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_IncTick+0x20>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	4a03      	ldr	r2, [pc, #12]	; (80006e8 <HAL_IncTick+0x20>)
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000140 	.word	0x20000140

080006ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return uwTick;
 80006f0:	4b02      	ldr	r3, [pc, #8]	; (80006fc <HAL_GetTick+0x10>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000140 	.word	0x20000140

08000700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000708:	f7ff fff0 	bl	80006ec <HAL_GetTick>
 800070c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000718:	d005      	beq.n	8000726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <HAL_Delay+0x44>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	4413      	add	r3, r2
 8000724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000726:	bf00      	nop
 8000728:	f7ff ffe0 	bl	80006ec <HAL_GetTick>
 800072c:	4602      	mov	r2, r0
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	429a      	cmp	r2, r3
 8000736:	d8f7      	bhi.n	8000728 <HAL_Delay+0x28>
  {
  }
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000008 	.word	0x20000008

08000748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000764:	4013      	ands	r3, r2
 8000766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077a:	4a04      	ldr	r2, [pc, #16]	; (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	60d3      	str	r3, [r2, #12]
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	f003 0307 	and.w	r3, r3, #7
}
 800079e:	4618      	mov	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	db0a      	blt.n	80007d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	490c      	ldr	r1, [pc, #48]	; (80007f8 <__NVIC_SetPriority+0x4c>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	0112      	lsls	r2, r2, #4
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d4:	e00a      	b.n	80007ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4908      	ldr	r1, [pc, #32]	; (80007fc <__NVIC_SetPriority+0x50>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	3b04      	subs	r3, #4
 80007e4:	0112      	lsls	r2, r2, #4
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	440b      	add	r3, r1
 80007ea:	761a      	strb	r2, [r3, #24]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f1c3 0307 	rsb	r3, r3, #7
 800081a:	2b04      	cmp	r3, #4
 800081c:	bf28      	it	cs
 800081e:	2304      	movcs	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3304      	adds	r3, #4
 8000826:	2b06      	cmp	r3, #6
 8000828:	d902      	bls.n	8000830 <NVIC_EncodePriority+0x30>
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3b03      	subs	r3, #3
 800082e:	e000      	b.n	8000832 <NVIC_EncodePriority+0x32>
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	f04f 32ff 	mov.w	r2, #4294967295
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43da      	mvns	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	401a      	ands	r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000848:	f04f 31ff 	mov.w	r1, #4294967295
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43d9      	mvns	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	4313      	orrs	r3, r2
         );
}
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	; 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000874:	d301      	bcc.n	800087a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000876:	2301      	movs	r3, #1
 8000878:	e00f      	b.n	800089a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <SysTick_Config+0x40>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000882:	210f      	movs	r1, #15
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f7ff ff90 	bl	80007ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SysTick_Config+0x40>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SysTick_Config+0x40>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff49 	bl	8000748 <__NVIC_SetPriorityGrouping>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d0:	f7ff ff5e 	bl	8000790 <__NVIC_GetPriorityGrouping>
 80008d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f7ff ff90 	bl	8000800 <NVIC_EncodePriority>
 80008e0:	4602      	mov	r2, r0
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff5f 	bl	80007ac <__NVIC_SetPriority>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff ffb0 	bl	8000864 <SysTick_Config>
 8000904:	4603      	mov	r3, r0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	b480      	push	{r7}
 8000912:	b08b      	sub	sp, #44	; 0x2c
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000922:	e179      	b.n	8000c18 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000924:	2201      	movs	r2, #1
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	429a      	cmp	r2, r3
 800093e:	f040 8168 	bne.w	8000c12 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	4a96      	ldr	r2, [pc, #600]	; (8000ba0 <HAL_GPIO_Init+0x290>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d05e      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 800094c:	4a94      	ldr	r2, [pc, #592]	; (8000ba0 <HAL_GPIO_Init+0x290>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d875      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 8000952:	4a94      	ldr	r2, [pc, #592]	; (8000ba4 <HAL_GPIO_Init+0x294>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d058      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 8000958:	4a92      	ldr	r2, [pc, #584]	; (8000ba4 <HAL_GPIO_Init+0x294>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d86f      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 800095e:	4a92      	ldr	r2, [pc, #584]	; (8000ba8 <HAL_GPIO_Init+0x298>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d052      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 8000964:	4a90      	ldr	r2, [pc, #576]	; (8000ba8 <HAL_GPIO_Init+0x298>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d869      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 800096a:	4a90      	ldr	r2, [pc, #576]	; (8000bac <HAL_GPIO_Init+0x29c>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d04c      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 8000970:	4a8e      	ldr	r2, [pc, #568]	; (8000bac <HAL_GPIO_Init+0x29c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d863      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 8000976:	4a8e      	ldr	r2, [pc, #568]	; (8000bb0 <HAL_GPIO_Init+0x2a0>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d046      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 800097c:	4a8c      	ldr	r2, [pc, #560]	; (8000bb0 <HAL_GPIO_Init+0x2a0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d85d      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 8000982:	2b12      	cmp	r3, #18
 8000984:	d82a      	bhi.n	80009dc <HAL_GPIO_Init+0xcc>
 8000986:	2b12      	cmp	r3, #18
 8000988:	d859      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 800098a:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <HAL_GPIO_Init+0x80>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	08000a0b 	.word	0x08000a0b
 8000994:	080009e5 	.word	0x080009e5
 8000998:	080009f7 	.word	0x080009f7
 800099c:	08000a39 	.word	0x08000a39
 80009a0:	08000a3f 	.word	0x08000a3f
 80009a4:	08000a3f 	.word	0x08000a3f
 80009a8:	08000a3f 	.word	0x08000a3f
 80009ac:	08000a3f 	.word	0x08000a3f
 80009b0:	08000a3f 	.word	0x08000a3f
 80009b4:	08000a3f 	.word	0x08000a3f
 80009b8:	08000a3f 	.word	0x08000a3f
 80009bc:	08000a3f 	.word	0x08000a3f
 80009c0:	08000a3f 	.word	0x08000a3f
 80009c4:	08000a3f 	.word	0x08000a3f
 80009c8:	08000a3f 	.word	0x08000a3f
 80009cc:	08000a3f 	.word	0x08000a3f
 80009d0:	08000a3f 	.word	0x08000a3f
 80009d4:	080009ed 	.word	0x080009ed
 80009d8:	08000a01 	.word	0x08000a01
 80009dc:	4a75      	ldr	r2, [pc, #468]	; (8000bb4 <HAL_GPIO_Init+0x2a4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d013      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009e2:	e02c      	b.n	8000a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	623b      	str	r3, [r7, #32]
          break;
 80009ea:	e029      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	3304      	adds	r3, #4
 80009f2:	623b      	str	r3, [r7, #32]
          break;
 80009f4:	e024      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	3308      	adds	r3, #8
 80009fc:	623b      	str	r3, [r7, #32]
          break;
 80009fe:	e01f      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	330c      	adds	r3, #12
 8000a06:	623b      	str	r3, [r7, #32]
          break;
 8000a08:	e01a      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d102      	bne.n	8000a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a12:	2304      	movs	r3, #4
 8000a14:	623b      	str	r3, [r7, #32]
          break;
 8000a16:	e013      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d105      	bne.n	8000a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a20:	2308      	movs	r3, #8
 8000a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	69fa      	ldr	r2, [r7, #28]
 8000a28:	611a      	str	r2, [r3, #16]
          break;
 8000a2a:	e009      	b.n	8000a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	69fa      	ldr	r2, [r7, #28]
 8000a34:	615a      	str	r2, [r3, #20]
          break;
 8000a36:	e003      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
          break;
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          break;
 8000a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	2bff      	cmp	r3, #255	; 0xff
 8000a44:	d801      	bhi.n	8000a4a <HAL_GPIO_Init+0x13a>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	e001      	b.n	8000a4e <HAL_GPIO_Init+0x13e>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	2bff      	cmp	r3, #255	; 0xff
 8000a54:	d802      	bhi.n	8000a5c <HAL_GPIO_Init+0x14c>
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	e002      	b.n	8000a62 <HAL_GPIO_Init+0x152>
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	3b08      	subs	r3, #8
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	210f      	movs	r1, #15
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	401a      	ands	r2, r3
 8000a74:	6a39      	ldr	r1, [r7, #32]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f000 80c1 	beq.w	8000c12 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a90:	4b49      	ldr	r3, [pc, #292]	; (8000bb8 <HAL_GPIO_Init+0x2a8>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a48      	ldr	r2, [pc, #288]	; (8000bb8 <HAL_GPIO_Init+0x2a8>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b46      	ldr	r3, [pc, #280]	; (8000bb8 <HAL_GPIO_Init+0x2a8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aa8:	4a44      	ldr	r2, [pc, #272]	; (8000bbc <HAL_GPIO_Init+0x2ac>)
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	089b      	lsrs	r3, r3, #2
 8000aae:	3302      	adds	r3, #2
 8000ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	f003 0303 	and.w	r3, r3, #3
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	220f      	movs	r2, #15
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a3c      	ldr	r2, [pc, #240]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d01f      	beq.n	8000b14 <HAL_GPIO_Init+0x204>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a3b      	ldr	r2, [pc, #236]	; (8000bc4 <HAL_GPIO_Init+0x2b4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d019      	beq.n	8000b10 <HAL_GPIO_Init+0x200>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a3a      	ldr	r2, [pc, #232]	; (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d013      	beq.n	8000b0c <HAL_GPIO_Init+0x1fc>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a39      	ldr	r2, [pc, #228]	; (8000bcc <HAL_GPIO_Init+0x2bc>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d00d      	beq.n	8000b08 <HAL_GPIO_Init+0x1f8>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a38      	ldr	r2, [pc, #224]	; (8000bd0 <HAL_GPIO_Init+0x2c0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d007      	beq.n	8000b04 <HAL_GPIO_Init+0x1f4>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a37      	ldr	r2, [pc, #220]	; (8000bd4 <HAL_GPIO_Init+0x2c4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d101      	bne.n	8000b00 <HAL_GPIO_Init+0x1f0>
 8000afc:	2305      	movs	r3, #5
 8000afe:	e00a      	b.n	8000b16 <HAL_GPIO_Init+0x206>
 8000b00:	2306      	movs	r3, #6
 8000b02:	e008      	b.n	8000b16 <HAL_GPIO_Init+0x206>
 8000b04:	2304      	movs	r3, #4
 8000b06:	e006      	b.n	8000b16 <HAL_GPIO_Init+0x206>
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e004      	b.n	8000b16 <HAL_GPIO_Init+0x206>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0x206>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <HAL_GPIO_Init+0x206>
 8000b14:	2300      	movs	r3, #0
 8000b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b18:	f002 0203 	and.w	r2, r2, #3
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	4093      	lsls	r3, r2
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b26:	4925      	ldr	r1, [pc, #148]	; (8000bbc <HAL_GPIO_Init+0x2ac>)
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d006      	beq.n	8000b4e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b40:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <HAL_GPIO_Init+0x2c8>)
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	4924      	ldr	r1, [pc, #144]	; (8000bd8 <HAL_GPIO_Init+0x2c8>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	608b      	str	r3, [r1, #8]
 8000b4c:	e006      	b.n	8000b5c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b4e:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <HAL_GPIO_Init+0x2c8>)
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4920      	ldr	r1, [pc, #128]	; (8000bd8 <HAL_GPIO_Init+0x2c8>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_GPIO_Init+0x2c8>)
 8000b6a:	68da      	ldr	r2, [r3, #12]
 8000b6c:	491a      	ldr	r1, [pc, #104]	; (8000bd8 <HAL_GPIO_Init+0x2c8>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	60cb      	str	r3, [r1, #12]
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_GPIO_Init+0x2c8>)
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	4916      	ldr	r1, [pc, #88]	; (8000bd8 <HAL_GPIO_Init+0x2c8>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d025      	beq.n	8000bdc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_GPIO_Init+0x2c8>)
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	4910      	ldr	r1, [pc, #64]	; (8000bd8 <HAL_GPIO_Init+0x2c8>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	604b      	str	r3, [r1, #4]
 8000b9c:	e025      	b.n	8000bea <HAL_GPIO_Init+0x2da>
 8000b9e:	bf00      	nop
 8000ba0:	10320000 	.word	0x10320000
 8000ba4:	10310000 	.word	0x10310000
 8000ba8:	10220000 	.word	0x10220000
 8000bac:	10210000 	.word	0x10210000
 8000bb0:	10120000 	.word	0x10120000
 8000bb4:	10110000 	.word	0x10110000
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010000 	.word	0x40010000
 8000bc0:	40010800 	.word	0x40010800
 8000bc4:	40010c00 	.word	0x40010c00
 8000bc8:	40011000 	.word	0x40011000
 8000bcc:	40011400 	.word	0x40011400
 8000bd0:	40011800 	.word	0x40011800
 8000bd4:	40011c00 	.word	0x40011c00
 8000bd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_GPIO_Init+0x324>)
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	4913      	ldr	r1, [pc, #76]	; (8000c34 <HAL_GPIO_Init+0x324>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d006      	beq.n	8000c04 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_GPIO_Init+0x324>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <HAL_GPIO_Init+0x324>)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	600b      	str	r3, [r1, #0]
 8000c02:	e006      	b.n	8000c12 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_GPIO_Init+0x324>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	4909      	ldr	r1, [pc, #36]	; (8000c34 <HAL_GPIO_Init+0x324>)
 8000c0e:	4013      	ands	r3, r2
 8000c10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	3301      	adds	r3, #1
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f47f ae7e 	bne.w	8000924 <HAL_GPIO_Init+0x14>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	372c      	adds	r7, #44	; 0x2c
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	40010400 	.word	0x40010400

08000c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e272      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8087 	beq.w	8000d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c58:	4b92      	ldr	r3, [pc, #584]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 030c 	and.w	r3, r3, #12
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	d00c      	beq.n	8000c7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c64:	4b8f      	ldr	r3, [pc, #572]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 030c 	and.w	r3, r3, #12
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d112      	bne.n	8000c96 <HAL_RCC_OscConfig+0x5e>
 8000c70:	4b8c      	ldr	r3, [pc, #560]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c7c:	d10b      	bne.n	8000c96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7e:	4b89      	ldr	r3, [pc, #548]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d06c      	beq.n	8000d64 <HAL_RCC_OscConfig+0x12c>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d168      	bne.n	8000d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e24c      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c9e:	d106      	bne.n	8000cae <HAL_RCC_OscConfig+0x76>
 8000ca0:	4b80      	ldr	r3, [pc, #512]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a7f      	ldr	r2, [pc, #508]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	e02e      	b.n	8000d0c <HAL_RCC_OscConfig+0xd4>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x98>
 8000cb6:	4b7b      	ldr	r3, [pc, #492]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a7a      	ldr	r2, [pc, #488]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	4b78      	ldr	r3, [pc, #480]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a77      	ldr	r2, [pc, #476]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e01d      	b.n	8000d0c <HAL_RCC_OscConfig+0xd4>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cd8:	d10c      	bne.n	8000cf4 <HAL_RCC_OscConfig+0xbc>
 8000cda:	4b72      	ldr	r3, [pc, #456]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a71      	ldr	r2, [pc, #452]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4b6f      	ldr	r3, [pc, #444]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a6e      	ldr	r2, [pc, #440]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e00b      	b.n	8000d0c <HAL_RCC_OscConfig+0xd4>
 8000cf4:	4b6b      	ldr	r3, [pc, #428]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a6a      	ldr	r2, [pc, #424]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b68      	ldr	r3, [pc, #416]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a67      	ldr	r2, [pc, #412]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d013      	beq.n	8000d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fcea 	bl	80006ec <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d1c:	f7ff fce6 	bl	80006ec <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b64      	cmp	r3, #100	; 0x64
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e200      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f0      	beq.n	8000d1c <HAL_RCC_OscConfig+0xe4>
 8000d3a:	e014      	b.n	8000d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fcd6 	bl	80006ec <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d44:	f7ff fcd2 	bl	80006ec <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b64      	cmp	r3, #100	; 0x64
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e1ec      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d56:	4b53      	ldr	r3, [pc, #332]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f0      	bne.n	8000d44 <HAL_RCC_OscConfig+0x10c>
 8000d62:	e000      	b.n	8000d66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d063      	beq.n	8000e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d72:	4b4c      	ldr	r3, [pc, #304]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 030c 	and.w	r3, r3, #12
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00b      	beq.n	8000d96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d7e:	4b49      	ldr	r3, [pc, #292]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 030c 	and.w	r3, r3, #12
 8000d86:	2b08      	cmp	r3, #8
 8000d88:	d11c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x18c>
 8000d8a:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d116      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d96:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d005      	beq.n	8000dae <HAL_RCC_OscConfig+0x176>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d001      	beq.n	8000dae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e1c0      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4939      	ldr	r1, [pc, #228]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc2:	e03a      	b.n	8000e3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d020      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dcc:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd2:	f7ff fc8b 	bl	80006ec <HAL_GetTick>
 8000dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd8:	e008      	b.n	8000dec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dda:	f7ff fc87 	bl	80006ec <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e1a1      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0f0      	beq.n	8000dda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df8:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4927      	ldr	r1, [pc, #156]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
 8000e0c:	e015      	b.n	8000e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fc6a 	bl	80006ec <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fc66 	bl	80006ec <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e180      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d03a      	beq.n	8000ebc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d019      	beq.n	8000e82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_RCC_OscConfig+0x274>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e54:	f7ff fc4a 	bl	80006ec <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fc46 	bl	80006ec <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e160      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f0      	beq.n	8000e5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f000 face 	bl	800141c <RCC_Delay>
 8000e80:	e01c      	b.n	8000ebc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_RCC_OscConfig+0x274>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e88:	f7ff fc30 	bl	80006ec <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8e:	e00f      	b.n	8000eb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e90:	f7ff fc2c 	bl	80006ec <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d908      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e146      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	42420000 	.word	0x42420000
 8000eac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb0:	4b92      	ldr	r3, [pc, #584]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1e9      	bne.n	8000e90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 80a6 	beq.w	8001016 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ece:	4b8b      	ldr	r3, [pc, #556]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10d      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b88      	ldr	r3, [pc, #544]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a87      	ldr	r2, [pc, #540]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	61d3      	str	r3, [r2, #28]
 8000ee6:	4b85      	ldr	r3, [pc, #532]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef6:	4b82      	ldr	r3, [pc, #520]	; (8001100 <HAL_RCC_OscConfig+0x4c8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d118      	bne.n	8000f34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f02:	4b7f      	ldr	r3, [pc, #508]	; (8001100 <HAL_RCC_OscConfig+0x4c8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a7e      	ldr	r2, [pc, #504]	; (8001100 <HAL_RCC_OscConfig+0x4c8>)
 8000f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fbed 	bl	80006ec <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f16:	f7ff fbe9 	bl	80006ec <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b64      	cmp	r3, #100	; 0x64
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e103      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f28:	4b75      	ldr	r3, [pc, #468]	; (8001100 <HAL_RCC_OscConfig+0x4c8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d106      	bne.n	8000f4a <HAL_RCC_OscConfig+0x312>
 8000f3c:	4b6f      	ldr	r3, [pc, #444]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	4a6e      	ldr	r2, [pc, #440]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6213      	str	r3, [r2, #32]
 8000f48:	e02d      	b.n	8000fa6 <HAL_RCC_OscConfig+0x36e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0x334>
 8000f52:	4b6a      	ldr	r3, [pc, #424]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a69      	ldr	r2, [pc, #420]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	f023 0301 	bic.w	r3, r3, #1
 8000f5c:	6213      	str	r3, [r2, #32]
 8000f5e:	4b67      	ldr	r3, [pc, #412]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4a66      	ldr	r2, [pc, #408]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	f023 0304 	bic.w	r3, r3, #4
 8000f68:	6213      	str	r3, [r2, #32]
 8000f6a:	e01c      	b.n	8000fa6 <HAL_RCC_OscConfig+0x36e>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	d10c      	bne.n	8000f8e <HAL_RCC_OscConfig+0x356>
 8000f74:	4b61      	ldr	r3, [pc, #388]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4a60      	ldr	r2, [pc, #384]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6213      	str	r3, [r2, #32]
 8000f80:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4a5d      	ldr	r2, [pc, #372]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6213      	str	r3, [r2, #32]
 8000f8c:	e00b      	b.n	8000fa6 <HAL_RCC_OscConfig+0x36e>
 8000f8e:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4a5a      	ldr	r2, [pc, #360]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	f023 0301 	bic.w	r3, r3, #1
 8000f98:	6213      	str	r3, [r2, #32]
 8000f9a:	4b58      	ldr	r3, [pc, #352]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4a57      	ldr	r2, [pc, #348]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d015      	beq.n	8000fda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fae:	f7ff fb9d 	bl	80006ec <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb4:	e00a      	b.n	8000fcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fb99 	bl	80006ec <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e0b1      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fcc:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0ee      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x37e>
 8000fd8:	e014      	b.n	8001004 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fb87 	bl	80006ec <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe0:	e00a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fb83 	bl	80006ec <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e09b      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff8:	4b40      	ldr	r3, [pc, #256]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1ee      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d105      	bne.n	8001016 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800100a:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a3b      	ldr	r2, [pc, #236]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8001010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001014:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 8087 	beq.w	800112e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b08      	cmp	r3, #8
 800102a:	d061      	beq.n	80010f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d146      	bne.n	80010c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001034:	4b33      	ldr	r3, [pc, #204]	; (8001104 <HAL_RCC_OscConfig+0x4cc>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fb57 	bl	80006ec <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001042:	f7ff fb53 	bl	80006ec <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e06d      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001054:	4b29      	ldr	r3, [pc, #164]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f0      	bne.n	8001042 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001068:	d108      	bne.n	800107c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	4921      	ldr	r1, [pc, #132]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a19      	ldr	r1, [r3, #32]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	430b      	orrs	r3, r1
 800108e:	491b      	ldr	r1, [pc, #108]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8001090:	4313      	orrs	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_RCC_OscConfig+0x4cc>)
 8001096:	2201      	movs	r2, #1
 8001098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109a:	f7ff fb27 	bl	80006ec <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a2:	f7ff fb23 	bl	80006ec <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e03d      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f0      	beq.n	80010a2 <HAL_RCC_OscConfig+0x46a>
 80010c0:	e035      	b.n	800112e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_RCC_OscConfig+0x4cc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fb10 	bl	80006ec <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d0:	f7ff fb0c 	bl	80006ec <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e026      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x498>
 80010ee:	e01e      	b.n	800112e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d107      	bne.n	8001108 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e019      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
 80010fc:	40021000 	.word	0x40021000
 8001100:	40007000 	.word	0x40007000
 8001104:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_RCC_OscConfig+0x500>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	429a      	cmp	r2, r3
 800111a:	d106      	bne.n	800112a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001126:	429a      	cmp	r2, r3
 8001128:	d001      	beq.n	800112e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0d0      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001150:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d910      	bls.n	8001180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115e:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 0207 	bic.w	r2, r3, #7
 8001166:	4965      	ldr	r1, [pc, #404]	; (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800116e:	4b63      	ldr	r3, [pc, #396]	; (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d001      	beq.n	8001180 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e0b8      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d020      	beq.n	80011ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001198:	4b59      	ldr	r3, [pc, #356]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4a58      	ldr	r2, [pc, #352]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011b0:	4b53      	ldr	r3, [pc, #332]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4a52      	ldr	r2, [pc, #328]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011bc:	4b50      	ldr	r3, [pc, #320]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	494d      	ldr	r1, [pc, #308]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d040      	beq.n	800125c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d107      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	4b47      	ldr	r3, [pc, #284]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d115      	bne.n	800121a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e07f      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d107      	bne.n	800120a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fa:	4b41      	ldr	r3, [pc, #260]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d109      	bne.n	800121a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e073      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e06b      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f023 0203 	bic.w	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4936      	ldr	r1, [pc, #216]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800122c:	f7ff fa5e 	bl	80006ec <HAL_GetTick>
 8001230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001232:	e00a      	b.n	800124a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001234:	f7ff fa5a 	bl	80006ec <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001242:	4293      	cmp	r3, r2
 8001244:	d901      	bls.n	800124a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e053      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 020c 	and.w	r2, r3, #12
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	429a      	cmp	r2, r3
 800125a:	d1eb      	bne.n	8001234 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d210      	bcs.n	800128c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 0207 	bic.w	r2, r3, #7
 8001272:	4922      	ldr	r1, [pc, #136]	; (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d001      	beq.n	800128c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e032      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b00      	cmp	r3, #0
 8001296:	d008      	beq.n	80012aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	4916      	ldr	r1, [pc, #88]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d009      	beq.n	80012ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	490e      	ldr	r1, [pc, #56]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012ca:	f000 f821 	bl	8001310 <HAL_RCC_GetSysClockFreq>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	490a      	ldr	r1, [pc, #40]	; (8001304 <HAL_RCC_ClockConfig+0x1c8>)
 80012dc:	5ccb      	ldrb	r3, [r1, r3]
 80012de:	fa22 f303 	lsr.w	r3, r2, r3
 80012e2:	4a09      	ldr	r2, [pc, #36]	; (8001308 <HAL_RCC_ClockConfig+0x1cc>)
 80012e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_RCC_ClockConfig+0x1d0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f9bc 	bl	8000668 <HAL_InitTick>

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40022000 	.word	0x40022000
 8001300:	40021000 	.word	0x40021000
 8001304:	08002cf8 	.word	0x08002cf8
 8001308:	20000000 	.word	0x20000000
 800130c:	20000004 	.word	0x20000004

08001310 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b04      	cmp	r3, #4
 8001338:	d002      	beq.n	8001340 <HAL_RCC_GetSysClockFreq+0x30>
 800133a:	2b08      	cmp	r3, #8
 800133c:	d003      	beq.n	8001346 <HAL_RCC_GetSysClockFreq+0x36>
 800133e:	e027      	b.n	8001390 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001342:	613b      	str	r3, [r7, #16]
      break;
 8001344:	e027      	b.n	8001396 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	0c9b      	lsrs	r3, r3, #18
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001350:	5cd3      	ldrb	r3, [r2, r3]
 8001352:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d010      	beq.n	8001380 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	0c5b      	lsrs	r3, r3, #17
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001372:	fb03 f202 	mul.w	r2, r3, r2
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	fbb2 f3f3 	udiv	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e004      	b.n	800138a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	613b      	str	r3, [r7, #16]
      break;
 800138e:	e002      	b.n	8001396 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001392:	613b      	str	r3, [r7, #16]
      break;
 8001394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001396:	693b      	ldr	r3, [r7, #16]
}
 8001398:	4618      	mov	r0, r3
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	007a1200 	.word	0x007a1200
 80013ac:	08002d10 	.word	0x08002d10
 80013b0:	08002d20 	.word	0x08002d20
 80013b4:	003d0900 	.word	0x003d0900

080013b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	20000000 	.word	0x20000000

080013cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013d0:	f7ff fff2 	bl	80013b8 <HAL_RCC_GetHCLKFreq>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	4903      	ldr	r1, [pc, #12]	; (80013f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013e2:	5ccb      	ldrb	r3, [r1, r3]
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	08002d08 	.word	0x08002d08

080013f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013f8:	f7ff ffde 	bl	80013b8 <HAL_RCC_GetHCLKFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	0adb      	lsrs	r3, r3, #11
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	4903      	ldr	r1, [pc, #12]	; (8001418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	08002d08 	.word	0x08002d08

0800141c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <RCC_Delay+0x34>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <RCC_Delay+0x38>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	0a5b      	lsrs	r3, r3, #9
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	fb02 f303 	mul.w	r3, r2, r3
 8001436:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001438:	bf00      	nop
  }
  while (Delay --);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	60fa      	str	r2, [r7, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f9      	bne.n	8001438 <RCC_Delay+0x1c>
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	20000000 	.word	0x20000000
 8001454:	10624dd3 	.word	0x10624dd3

08001458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e042      	b.n	80014f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d106      	bne.n	8001484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff f806 	bl	8000490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2224      	movs	r2, #36	; 0x24
 8001488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800149a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f9cf 	bl	8001840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2220      	movs	r2, #32
 80014dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2220      	movs	r2, #32
 80014e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	4613      	mov	r3, r2
 8001506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b20      	cmp	r3, #32
 8001516:	d175      	bne.n	8001604 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_UART_Transmit+0x2c>
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e06e      	b.n	8001606 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2221      	movs	r2, #33	; 0x21
 8001532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001536:	f7ff f8d9 	bl	80006ec <HAL_GetTick>
 800153a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	88fa      	ldrh	r2, [r7, #6]
 8001540:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	88fa      	ldrh	r2, [r7, #6]
 8001546:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001550:	d108      	bne.n	8001564 <HAL_UART_Transmit+0x6c>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d104      	bne.n	8001564 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	e003      	b.n	800156c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800156c:	e02e      	b.n	80015cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2200      	movs	r2, #0
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 f86d 	bl	8001658 <UART_WaitOnFlagUntilTimeout>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2220      	movs	r2, #32
 8001588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e03a      	b.n	8001606 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10b      	bne.n	80015ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	3302      	adds	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	e007      	b.n	80015be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	3301      	adds	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1cb      	bne.n	800156e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2200      	movs	r2, #0
 80015de:	2140      	movs	r1, #64	; 0x40
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 f839 	bl	8001658 <UART_WaitOnFlagUntilTimeout>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2220      	movs	r2, #32
 80015f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e006      	b.n	8001606 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2220      	movs	r2, #32
 80015fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	e000      	b.n	8001606 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001604:	2302      	movs	r3, #2
  }
}
 8001606:	4618      	mov	r0, r3
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	4613      	mov	r3, r2
 800161a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b20      	cmp	r3, #32
 8001626:	d112      	bne.n	800164e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <HAL_UART_Receive_IT+0x26>
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e00b      	b.n	8001650 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	461a      	mov	r2, r3
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f860 	bl	800170a <UART_Start_Receive_IT>
 800164a:	4603      	mov	r3, r0
 800164c:	e000      	b.n	8001650 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800164e:	2302      	movs	r3, #2
  }
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	4613      	mov	r3, r2
 8001666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001668:	e03b      	b.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	d037      	beq.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001672:	f7ff f83b 	bl	80006ec <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	6a3a      	ldr	r2, [r7, #32]
 800167e:	429a      	cmp	r2, r3
 8001680:	d302      	bcc.n	8001688 <UART_WaitOnFlagUntilTimeout+0x30>
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e03a      	b.n	8001702 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d023      	beq.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2b80      	cmp	r3, #128	; 0x80
 800169e:	d020      	beq.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2b40      	cmp	r3, #64	; 0x40
 80016a4:	d01d      	beq.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d116      	bne.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f856 	bl	800177c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2208      	movs	r2, #8
 80016d4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00f      	b.n	8001702 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4013      	ands	r3, r2
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	bf0c      	ite	eq
 80016f2:	2301      	moveq	r3, #1
 80016f4:	2300      	movne	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d0b4      	beq.n	800166a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	4613      	mov	r3, r2
 8001716:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	88fa      	ldrh	r2, [r7, #6]
 8001722:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	88fa      	ldrh	r2, [r7, #6]
 8001728:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2222      	movs	r2, #34	; 0x22
 8001734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800174e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0220 	orr.w	r2, r2, #32
 800176e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800177c:	b480      	push	{r7}
 800177e:	b095      	sub	sp, #84	; 0x54
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	330c      	adds	r3, #12
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800178c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178e:	e853 3f00 	ldrex	r3, [r3]
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001796:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800179a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	330c      	adds	r3, #12
 80017a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017a4:	643a      	str	r2, [r7, #64]	; 0x40
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017ac:	e841 2300 	strex	r3, r2, [r1]
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80017b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e5      	bne.n	8001784 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3314      	adds	r3, #20
 80017be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	e853 3f00 	ldrex	r3, [r3]
 80017c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3314      	adds	r3, #20
 80017d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e0:	e841 2300 	strex	r3, r2, [r1]
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1e5      	bne.n	80017b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d119      	bne.n	8001828 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	330c      	adds	r3, #12
 80017fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	e853 3f00 	ldrex	r3, [r3]
 8001802:	60bb      	str	r3, [r7, #8]
   return(result);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f023 0310 	bic.w	r3, r3, #16
 800180a:	647b      	str	r3, [r7, #68]	; 0x44
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	330c      	adds	r3, #12
 8001812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001814:	61ba      	str	r2, [r7, #24]
 8001816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001818:	6979      	ldr	r1, [r7, #20]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	e841 2300 	strex	r3, r2, [r1]
 8001820:	613b      	str	r3, [r7, #16]
   return(result);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1e5      	bne.n	80017f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2220      	movs	r2, #32
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001836:	bf00      	nop
 8001838:	3754      	adds	r7, #84	; 0x54
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	4313      	orrs	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800187a:	f023 030c 	bic.w	r3, r3, #12
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	68b9      	ldr	r1, [r7, #8]
 8001884:	430b      	orrs	r3, r1
 8001886:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699a      	ldr	r2, [r3, #24]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a2c      	ldr	r2, [pc, #176]	; (8001954 <UART_SetConfig+0x114>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d103      	bne.n	80018b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80018a8:	f7ff fda4 	bl	80013f4 <HAL_RCC_GetPCLK2Freq>
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	e002      	b.n	80018b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80018b0:	f7ff fd8c 	bl	80013cc <HAL_RCC_GetPCLK1Freq>
 80018b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	009a      	lsls	r2, r3, #2
 80018c0:	441a      	add	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <UART_SetConfig+0x118>)
 80018ce:	fba2 2303 	umull	r2, r3, r2, r3
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	0119      	lsls	r1, r3, #4
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	009a      	lsls	r2, r3, #2
 80018e0:	441a      	add	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <UART_SetConfig+0x118>)
 80018ee:	fba3 0302 	umull	r0, r3, r3, r2
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2064      	movs	r0, #100	; 0x64
 80018f6:	fb00 f303 	mul.w	r3, r0, r3
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	3332      	adds	r3, #50	; 0x32
 8001900:	4a15      	ldr	r2, [pc, #84]	; (8001958 <UART_SetConfig+0x118>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800190c:	4419      	add	r1, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	009a      	lsls	r2, r3, #2
 8001918:	441a      	add	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	fbb2 f2f3 	udiv	r2, r2, r3
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <UART_SetConfig+0x118>)
 8001926:	fba3 0302 	umull	r0, r3, r3, r2
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2064      	movs	r0, #100	; 0x64
 800192e:	fb00 f303 	mul.w	r3, r0, r3
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	3332      	adds	r3, #50	; 0x32
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <UART_SetConfig+0x118>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	f003 020f 	and.w	r2, r3, #15
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	440a      	add	r2, r1
 800194a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40013800 	.word	0x40013800
 8001958:	51eb851f 	.word	0x51eb851f

0800195c <__errno>:
 800195c:	4b01      	ldr	r3, [pc, #4]	; (8001964 <__errno+0x8>)
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	2000000c 	.word	0x2000000c

08001968 <__libc_init_array>:
 8001968:	b570      	push	{r4, r5, r6, lr}
 800196a:	2600      	movs	r6, #0
 800196c:	4d0c      	ldr	r5, [pc, #48]	; (80019a0 <__libc_init_array+0x38>)
 800196e:	4c0d      	ldr	r4, [pc, #52]	; (80019a4 <__libc_init_array+0x3c>)
 8001970:	1b64      	subs	r4, r4, r5
 8001972:	10a4      	asrs	r4, r4, #2
 8001974:	42a6      	cmp	r6, r4
 8001976:	d109      	bne.n	800198c <__libc_init_array+0x24>
 8001978:	f001 f950 	bl	8002c1c <_init>
 800197c:	2600      	movs	r6, #0
 800197e:	4d0a      	ldr	r5, [pc, #40]	; (80019a8 <__libc_init_array+0x40>)
 8001980:	4c0a      	ldr	r4, [pc, #40]	; (80019ac <__libc_init_array+0x44>)
 8001982:	1b64      	subs	r4, r4, r5
 8001984:	10a4      	asrs	r4, r4, #2
 8001986:	42a6      	cmp	r6, r4
 8001988:	d105      	bne.n	8001996 <__libc_init_array+0x2e>
 800198a:	bd70      	pop	{r4, r5, r6, pc}
 800198c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001990:	4798      	blx	r3
 8001992:	3601      	adds	r6, #1
 8001994:	e7ee      	b.n	8001974 <__libc_init_array+0xc>
 8001996:	f855 3b04 	ldr.w	r3, [r5], #4
 800199a:	4798      	blx	r3
 800199c:	3601      	adds	r6, #1
 800199e:	e7f2      	b.n	8001986 <__libc_init_array+0x1e>
 80019a0:	08002ed4 	.word	0x08002ed4
 80019a4:	08002ed4 	.word	0x08002ed4
 80019a8:	08002ed4 	.word	0x08002ed4
 80019ac:	08002ed8 	.word	0x08002ed8

080019b0 <memset>:
 80019b0:	4603      	mov	r3, r0
 80019b2:	4402      	add	r2, r0
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d100      	bne.n	80019ba <memset+0xa>
 80019b8:	4770      	bx	lr
 80019ba:	f803 1b01 	strb.w	r1, [r3], #1
 80019be:	e7f9      	b.n	80019b4 <memset+0x4>

080019c0 <siscanf>:
 80019c0:	b40e      	push	{r1, r2, r3}
 80019c2:	f44f 7201 	mov.w	r2, #516	; 0x204
 80019c6:	b530      	push	{r4, r5, lr}
 80019c8:	b09c      	sub	sp, #112	; 0x70
 80019ca:	ac1f      	add	r4, sp, #124	; 0x7c
 80019cc:	f854 5b04 	ldr.w	r5, [r4], #4
 80019d0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80019d4:	9002      	str	r0, [sp, #8]
 80019d6:	9006      	str	r0, [sp, #24]
 80019d8:	f7fe fc24 	bl	8000224 <strlen>
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <siscanf+0x4c>)
 80019de:	9003      	str	r0, [sp, #12]
 80019e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80019e2:	2300      	movs	r3, #0
 80019e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80019e6:	9314      	str	r3, [sp, #80]	; 0x50
 80019e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ec:	9007      	str	r0, [sp, #28]
 80019ee:	4808      	ldr	r0, [pc, #32]	; (8001a10 <siscanf+0x50>)
 80019f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80019f4:	462a      	mov	r2, r5
 80019f6:	4623      	mov	r3, r4
 80019f8:	a902      	add	r1, sp, #8
 80019fa:	6800      	ldr	r0, [r0, #0]
 80019fc:	9401      	str	r4, [sp, #4]
 80019fe:	f000 f9e1 	bl	8001dc4 <__ssvfiscanf_r>
 8001a02:	b01c      	add	sp, #112	; 0x70
 8001a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a08:	b003      	add	sp, #12
 8001a0a:	4770      	bx	lr
 8001a0c:	08001a15 	.word	0x08001a15
 8001a10:	2000000c 	.word	0x2000000c

08001a14 <__seofread>:
 8001a14:	2000      	movs	r0, #0
 8001a16:	4770      	bx	lr

08001a18 <_vsiprintf_r>:
 8001a18:	b500      	push	{lr}
 8001a1a:	b09b      	sub	sp, #108	; 0x6c
 8001a1c:	9100      	str	r1, [sp, #0]
 8001a1e:	9104      	str	r1, [sp, #16]
 8001a20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001a24:	9105      	str	r1, [sp, #20]
 8001a26:	9102      	str	r1, [sp, #8]
 8001a28:	4905      	ldr	r1, [pc, #20]	; (8001a40 <_vsiprintf_r+0x28>)
 8001a2a:	9103      	str	r1, [sp, #12]
 8001a2c:	4669      	mov	r1, sp
 8001a2e:	f000 f86f 	bl	8001b10 <_svfiprintf_r>
 8001a32:	2200      	movs	r2, #0
 8001a34:	9b00      	ldr	r3, [sp, #0]
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	b01b      	add	sp, #108	; 0x6c
 8001a3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a3e:	bf00      	nop
 8001a40:	ffff0208 	.word	0xffff0208

08001a44 <vsiprintf>:
 8001a44:	4613      	mov	r3, r2
 8001a46:	460a      	mov	r2, r1
 8001a48:	4601      	mov	r1, r0
 8001a4a:	4802      	ldr	r0, [pc, #8]	; (8001a54 <vsiprintf+0x10>)
 8001a4c:	6800      	ldr	r0, [r0, #0]
 8001a4e:	f7ff bfe3 	b.w	8001a18 <_vsiprintf_r>
 8001a52:	bf00      	nop
 8001a54:	2000000c 	.word	0x2000000c

08001a58 <__ssputs_r>:
 8001a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a5c:	688e      	ldr	r6, [r1, #8]
 8001a5e:	4682      	mov	sl, r0
 8001a60:	429e      	cmp	r6, r3
 8001a62:	460c      	mov	r4, r1
 8001a64:	4690      	mov	r8, r2
 8001a66:	461f      	mov	r7, r3
 8001a68:	d838      	bhi.n	8001adc <__ssputs_r+0x84>
 8001a6a:	898a      	ldrh	r2, [r1, #12]
 8001a6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001a70:	d032      	beq.n	8001ad8 <__ssputs_r+0x80>
 8001a72:	6825      	ldr	r5, [r4, #0]
 8001a74:	6909      	ldr	r1, [r1, #16]
 8001a76:	3301      	adds	r3, #1
 8001a78:	eba5 0901 	sub.w	r9, r5, r1
 8001a7c:	6965      	ldr	r5, [r4, #20]
 8001a7e:	444b      	add	r3, r9
 8001a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001a88:	106d      	asrs	r5, r5, #1
 8001a8a:	429d      	cmp	r5, r3
 8001a8c:	bf38      	it	cc
 8001a8e:	461d      	movcc	r5, r3
 8001a90:	0553      	lsls	r3, r2, #21
 8001a92:	d531      	bpl.n	8001af8 <__ssputs_r+0xa0>
 8001a94:	4629      	mov	r1, r5
 8001a96:	f000 fff9 	bl	8002a8c <_malloc_r>
 8001a9a:	4606      	mov	r6, r0
 8001a9c:	b950      	cbnz	r0, 8001ab4 <__ssputs_r+0x5c>
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f8ca 3000 	str.w	r3, [sl]
 8001aa8:	89a3      	ldrh	r3, [r4, #12]
 8001aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aae:	81a3      	strh	r3, [r4, #12]
 8001ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ab4:	464a      	mov	r2, r9
 8001ab6:	6921      	ldr	r1, [r4, #16]
 8001ab8:	f000 ff58 	bl	800296c <memcpy>
 8001abc:	89a3      	ldrh	r3, [r4, #12]
 8001abe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac6:	81a3      	strh	r3, [r4, #12]
 8001ac8:	6126      	str	r6, [r4, #16]
 8001aca:	444e      	add	r6, r9
 8001acc:	6026      	str	r6, [r4, #0]
 8001ace:	463e      	mov	r6, r7
 8001ad0:	6165      	str	r5, [r4, #20]
 8001ad2:	eba5 0509 	sub.w	r5, r5, r9
 8001ad6:	60a5      	str	r5, [r4, #8]
 8001ad8:	42be      	cmp	r6, r7
 8001ada:	d900      	bls.n	8001ade <__ssputs_r+0x86>
 8001adc:	463e      	mov	r6, r7
 8001ade:	4632      	mov	r2, r6
 8001ae0:	4641      	mov	r1, r8
 8001ae2:	6820      	ldr	r0, [r4, #0]
 8001ae4:	f000 ff50 	bl	8002988 <memmove>
 8001ae8:	68a3      	ldr	r3, [r4, #8]
 8001aea:	2000      	movs	r0, #0
 8001aec:	1b9b      	subs	r3, r3, r6
 8001aee:	60a3      	str	r3, [r4, #8]
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	4433      	add	r3, r6
 8001af4:	6023      	str	r3, [r4, #0]
 8001af6:	e7db      	b.n	8001ab0 <__ssputs_r+0x58>
 8001af8:	462a      	mov	r2, r5
 8001afa:	f001 f83b 	bl	8002b74 <_realloc_r>
 8001afe:	4606      	mov	r6, r0
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d1e1      	bne.n	8001ac8 <__ssputs_r+0x70>
 8001b04:	4650      	mov	r0, sl
 8001b06:	6921      	ldr	r1, [r4, #16]
 8001b08:	f000 ff58 	bl	80029bc <_free_r>
 8001b0c:	e7c7      	b.n	8001a9e <__ssputs_r+0x46>
	...

08001b10 <_svfiprintf_r>:
 8001b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b14:	4698      	mov	r8, r3
 8001b16:	898b      	ldrh	r3, [r1, #12]
 8001b18:	4607      	mov	r7, r0
 8001b1a:	061b      	lsls	r3, r3, #24
 8001b1c:	460d      	mov	r5, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	b09d      	sub	sp, #116	; 0x74
 8001b22:	d50e      	bpl.n	8001b42 <_svfiprintf_r+0x32>
 8001b24:	690b      	ldr	r3, [r1, #16]
 8001b26:	b963      	cbnz	r3, 8001b42 <_svfiprintf_r+0x32>
 8001b28:	2140      	movs	r1, #64	; 0x40
 8001b2a:	f000 ffaf 	bl	8002a8c <_malloc_r>
 8001b2e:	6028      	str	r0, [r5, #0]
 8001b30:	6128      	str	r0, [r5, #16]
 8001b32:	b920      	cbnz	r0, 8001b3e <_svfiprintf_r+0x2e>
 8001b34:	230c      	movs	r3, #12
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	e0d1      	b.n	8001ce2 <_svfiprintf_r+0x1d2>
 8001b3e:	2340      	movs	r3, #64	; 0x40
 8001b40:	616b      	str	r3, [r5, #20]
 8001b42:	2300      	movs	r3, #0
 8001b44:	9309      	str	r3, [sp, #36]	; 0x24
 8001b46:	2320      	movs	r3, #32
 8001b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b4c:	2330      	movs	r3, #48	; 0x30
 8001b4e:	f04f 0901 	mov.w	r9, #1
 8001b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001cfc <_svfiprintf_r+0x1ec>
 8001b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b5e:	4623      	mov	r3, r4
 8001b60:	469a      	mov	sl, r3
 8001b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b66:	b10a      	cbz	r2, 8001b6c <_svfiprintf_r+0x5c>
 8001b68:	2a25      	cmp	r2, #37	; 0x25
 8001b6a:	d1f9      	bne.n	8001b60 <_svfiprintf_r+0x50>
 8001b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8001b70:	d00b      	beq.n	8001b8a <_svfiprintf_r+0x7a>
 8001b72:	465b      	mov	r3, fp
 8001b74:	4622      	mov	r2, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	4638      	mov	r0, r7
 8001b7a:	f7ff ff6d 	bl	8001a58 <__ssputs_r>
 8001b7e:	3001      	adds	r0, #1
 8001b80:	f000 80aa 	beq.w	8001cd8 <_svfiprintf_r+0x1c8>
 8001b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b86:	445a      	add	r2, fp
 8001b88:	9209      	str	r2, [sp, #36]	; 0x24
 8001b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80a2 	beq.w	8001cd8 <_svfiprintf_r+0x1c8>
 8001b94:	2300      	movs	r3, #0
 8001b96:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b9e:	f10a 0a01 	add.w	sl, sl, #1
 8001ba2:	9304      	str	r3, [sp, #16]
 8001ba4:	9307      	str	r3, [sp, #28]
 8001ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001baa:	931a      	str	r3, [sp, #104]	; 0x68
 8001bac:	4654      	mov	r4, sl
 8001bae:	2205      	movs	r2, #5
 8001bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bb4:	4851      	ldr	r0, [pc, #324]	; (8001cfc <_svfiprintf_r+0x1ec>)
 8001bb6:	f000 fecb 	bl	8002950 <memchr>
 8001bba:	9a04      	ldr	r2, [sp, #16]
 8001bbc:	b9d8      	cbnz	r0, 8001bf6 <_svfiprintf_r+0xe6>
 8001bbe:	06d0      	lsls	r0, r2, #27
 8001bc0:	bf44      	itt	mi
 8001bc2:	2320      	movmi	r3, #32
 8001bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001bc8:	0711      	lsls	r1, r2, #28
 8001bca:	bf44      	itt	mi
 8001bcc:	232b      	movmi	r3, #43	; 0x2b
 8001bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8001bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8001bd8:	d015      	beq.n	8001c06 <_svfiprintf_r+0xf6>
 8001bda:	4654      	mov	r4, sl
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f04f 0c0a 	mov.w	ip, #10
 8001be2:	9a07      	ldr	r2, [sp, #28]
 8001be4:	4621      	mov	r1, r4
 8001be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001bea:	3b30      	subs	r3, #48	; 0x30
 8001bec:	2b09      	cmp	r3, #9
 8001bee:	d94e      	bls.n	8001c8e <_svfiprintf_r+0x17e>
 8001bf0:	b1b0      	cbz	r0, 8001c20 <_svfiprintf_r+0x110>
 8001bf2:	9207      	str	r2, [sp, #28]
 8001bf4:	e014      	b.n	8001c20 <_svfiprintf_r+0x110>
 8001bf6:	eba0 0308 	sub.w	r3, r0, r8
 8001bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	46a2      	mov	sl, r4
 8001c02:	9304      	str	r3, [sp, #16]
 8001c04:	e7d2      	b.n	8001bac <_svfiprintf_r+0x9c>
 8001c06:	9b03      	ldr	r3, [sp, #12]
 8001c08:	1d19      	adds	r1, r3, #4
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	9103      	str	r1, [sp, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	bfbb      	ittet	lt
 8001c12:	425b      	neglt	r3, r3
 8001c14:	f042 0202 	orrlt.w	r2, r2, #2
 8001c18:	9307      	strge	r3, [sp, #28]
 8001c1a:	9307      	strlt	r3, [sp, #28]
 8001c1c:	bfb8      	it	lt
 8001c1e:	9204      	strlt	r2, [sp, #16]
 8001c20:	7823      	ldrb	r3, [r4, #0]
 8001c22:	2b2e      	cmp	r3, #46	; 0x2e
 8001c24:	d10c      	bne.n	8001c40 <_svfiprintf_r+0x130>
 8001c26:	7863      	ldrb	r3, [r4, #1]
 8001c28:	2b2a      	cmp	r3, #42	; 0x2a
 8001c2a:	d135      	bne.n	8001c98 <_svfiprintf_r+0x188>
 8001c2c:	9b03      	ldr	r3, [sp, #12]
 8001c2e:	3402      	adds	r4, #2
 8001c30:	1d1a      	adds	r2, r3, #4
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	9203      	str	r2, [sp, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bfb8      	it	lt
 8001c3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c3e:	9305      	str	r3, [sp, #20]
 8001c40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001d00 <_svfiprintf_r+0x1f0>
 8001c44:	2203      	movs	r2, #3
 8001c46:	4650      	mov	r0, sl
 8001c48:	7821      	ldrb	r1, [r4, #0]
 8001c4a:	f000 fe81 	bl	8002950 <memchr>
 8001c4e:	b140      	cbz	r0, 8001c62 <_svfiprintf_r+0x152>
 8001c50:	2340      	movs	r3, #64	; 0x40
 8001c52:	eba0 000a 	sub.w	r0, r0, sl
 8001c56:	fa03 f000 	lsl.w	r0, r3, r0
 8001c5a:	9b04      	ldr	r3, [sp, #16]
 8001c5c:	3401      	adds	r4, #1
 8001c5e:	4303      	orrs	r3, r0
 8001c60:	9304      	str	r3, [sp, #16]
 8001c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c66:	2206      	movs	r2, #6
 8001c68:	4826      	ldr	r0, [pc, #152]	; (8001d04 <_svfiprintf_r+0x1f4>)
 8001c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c6e:	f000 fe6f 	bl	8002950 <memchr>
 8001c72:	2800      	cmp	r0, #0
 8001c74:	d038      	beq.n	8001ce8 <_svfiprintf_r+0x1d8>
 8001c76:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <_svfiprintf_r+0x1f8>)
 8001c78:	bb1b      	cbnz	r3, 8001cc2 <_svfiprintf_r+0x1b2>
 8001c7a:	9b03      	ldr	r3, [sp, #12]
 8001c7c:	3307      	adds	r3, #7
 8001c7e:	f023 0307 	bic.w	r3, r3, #7
 8001c82:	3308      	adds	r3, #8
 8001c84:	9303      	str	r3, [sp, #12]
 8001c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c88:	4433      	add	r3, r6
 8001c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8001c8c:	e767      	b.n	8001b5e <_svfiprintf_r+0x4e>
 8001c8e:	460c      	mov	r4, r1
 8001c90:	2001      	movs	r0, #1
 8001c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c96:	e7a5      	b.n	8001be4 <_svfiprintf_r+0xd4>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f04f 0c0a 	mov.w	ip, #10
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	3401      	adds	r4, #1
 8001ca2:	9305      	str	r3, [sp, #20]
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001caa:	3a30      	subs	r2, #48	; 0x30
 8001cac:	2a09      	cmp	r2, #9
 8001cae:	d903      	bls.n	8001cb8 <_svfiprintf_r+0x1a8>
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0c5      	beq.n	8001c40 <_svfiprintf_r+0x130>
 8001cb4:	9105      	str	r1, [sp, #20]
 8001cb6:	e7c3      	b.n	8001c40 <_svfiprintf_r+0x130>
 8001cb8:	4604      	mov	r4, r0
 8001cba:	2301      	movs	r3, #1
 8001cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001cc0:	e7f0      	b.n	8001ca4 <_svfiprintf_r+0x194>
 8001cc2:	ab03      	add	r3, sp, #12
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	462a      	mov	r2, r5
 8001cc8:	4638      	mov	r0, r7
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <_svfiprintf_r+0x1fc>)
 8001ccc:	a904      	add	r1, sp, #16
 8001cce:	f3af 8000 	nop.w
 8001cd2:	1c42      	adds	r2, r0, #1
 8001cd4:	4606      	mov	r6, r0
 8001cd6:	d1d6      	bne.n	8001c86 <_svfiprintf_r+0x176>
 8001cd8:	89ab      	ldrh	r3, [r5, #12]
 8001cda:	065b      	lsls	r3, r3, #25
 8001cdc:	f53f af2c 	bmi.w	8001b38 <_svfiprintf_r+0x28>
 8001ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ce2:	b01d      	add	sp, #116	; 0x74
 8001ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ce8:	ab03      	add	r3, sp, #12
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	462a      	mov	r2, r5
 8001cee:	4638      	mov	r0, r7
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <_svfiprintf_r+0x1fc>)
 8001cf2:	a904      	add	r1, sp, #16
 8001cf4:	f000 fa50 	bl	8002198 <_printf_i>
 8001cf8:	e7eb      	b.n	8001cd2 <_svfiprintf_r+0x1c2>
 8001cfa:	bf00      	nop
 8001cfc:	08002d22 	.word	0x08002d22
 8001d00:	08002d28 	.word	0x08002d28
 8001d04:	08002d2c 	.word	0x08002d2c
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	08001a59 	.word	0x08001a59

08001d10 <_sungetc_r>:
 8001d10:	b538      	push	{r3, r4, r5, lr}
 8001d12:	1c4b      	adds	r3, r1, #1
 8001d14:	4614      	mov	r4, r2
 8001d16:	d103      	bne.n	8001d20 <_sungetc_r+0x10>
 8001d18:	f04f 35ff 	mov.w	r5, #4294967295
 8001d1c:	4628      	mov	r0, r5
 8001d1e:	bd38      	pop	{r3, r4, r5, pc}
 8001d20:	8993      	ldrh	r3, [r2, #12]
 8001d22:	b2cd      	uxtb	r5, r1
 8001d24:	f023 0320 	bic.w	r3, r3, #32
 8001d28:	8193      	strh	r3, [r2, #12]
 8001d2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d2c:	6852      	ldr	r2, [r2, #4]
 8001d2e:	b18b      	cbz	r3, 8001d54 <_sungetc_r+0x44>
 8001d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d32:	4293      	cmp	r3, r2
 8001d34:	dd08      	ble.n	8001d48 <_sungetc_r+0x38>
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	1e5a      	subs	r2, r3, #1
 8001d3a:	6022      	str	r2, [r4, #0]
 8001d3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8001d40:	6863      	ldr	r3, [r4, #4]
 8001d42:	3301      	adds	r3, #1
 8001d44:	6063      	str	r3, [r4, #4]
 8001d46:	e7e9      	b.n	8001d1c <_sungetc_r+0xc>
 8001d48:	4621      	mov	r1, r4
 8001d4a:	f000 fdc7 	bl	80028dc <__submore>
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	d0f1      	beq.n	8001d36 <_sungetc_r+0x26>
 8001d52:	e7e1      	b.n	8001d18 <_sungetc_r+0x8>
 8001d54:	6921      	ldr	r1, [r4, #16]
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	b151      	cbz	r1, 8001d70 <_sungetc_r+0x60>
 8001d5a:	4299      	cmp	r1, r3
 8001d5c:	d208      	bcs.n	8001d70 <_sungetc_r+0x60>
 8001d5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8001d62:	42a9      	cmp	r1, r5
 8001d64:	d104      	bne.n	8001d70 <_sungetc_r+0x60>
 8001d66:	3b01      	subs	r3, #1
 8001d68:	3201      	adds	r2, #1
 8001d6a:	6023      	str	r3, [r4, #0]
 8001d6c:	6062      	str	r2, [r4, #4]
 8001d6e:	e7d5      	b.n	8001d1c <_sungetc_r+0xc>
 8001d70:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8001d74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d78:	6363      	str	r3, [r4, #52]	; 0x34
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8001d7e:	4623      	mov	r3, r4
 8001d80:	f803 5f46 	strb.w	r5, [r3, #70]!
 8001d84:	6023      	str	r3, [r4, #0]
 8001d86:	2301      	movs	r3, #1
 8001d88:	e7dc      	b.n	8001d44 <_sungetc_r+0x34>

08001d8a <__ssrefill_r>:
 8001d8a:	b510      	push	{r4, lr}
 8001d8c:	460c      	mov	r4, r1
 8001d8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8001d90:	b169      	cbz	r1, 8001dae <__ssrefill_r+0x24>
 8001d92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d96:	4299      	cmp	r1, r3
 8001d98:	d001      	beq.n	8001d9e <__ssrefill_r+0x14>
 8001d9a:	f000 fe0f 	bl	80029bc <_free_r>
 8001d9e:	2000      	movs	r0, #0
 8001da0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001da2:	6360      	str	r0, [r4, #52]	; 0x34
 8001da4:	6063      	str	r3, [r4, #4]
 8001da6:	b113      	cbz	r3, 8001dae <__ssrefill_r+0x24>
 8001da8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001daa:	6023      	str	r3, [r4, #0]
 8001dac:	bd10      	pop	{r4, pc}
 8001dae:	6923      	ldr	r3, [r4, #16]
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	6023      	str	r3, [r4, #0]
 8001db6:	2300      	movs	r3, #0
 8001db8:	6063      	str	r3, [r4, #4]
 8001dba:	89a3      	ldrh	r3, [r4, #12]
 8001dbc:	f043 0320 	orr.w	r3, r3, #32
 8001dc0:	81a3      	strh	r3, [r4, #12]
 8001dc2:	e7f3      	b.n	8001dac <__ssrefill_r+0x22>

08001dc4 <__ssvfiscanf_r>:
 8001dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dc8:	460c      	mov	r4, r1
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4606      	mov	r6, r0
 8001dce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8001dd2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8001dd6:	49a7      	ldr	r1, [pc, #668]	; (8002074 <__ssvfiscanf_r+0x2b0>)
 8001dd8:	f10d 0804 	add.w	r8, sp, #4
 8001ddc:	91a0      	str	r1, [sp, #640]	; 0x280
 8001dde:	49a6      	ldr	r1, [pc, #664]	; (8002078 <__ssvfiscanf_r+0x2b4>)
 8001de0:	4fa6      	ldr	r7, [pc, #664]	; (800207c <__ssvfiscanf_r+0x2b8>)
 8001de2:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8002080 <__ssvfiscanf_r+0x2bc>
 8001de6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8001dea:	91a1      	str	r1, [sp, #644]	; 0x284
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	7813      	ldrb	r3, [r2, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 815c 	beq.w	80020ae <__ssvfiscanf_r+0x2ea>
 8001df6:	5dd9      	ldrb	r1, [r3, r7]
 8001df8:	1c55      	adds	r5, r2, #1
 8001dfa:	f011 0108 	ands.w	r1, r1, #8
 8001dfe:	d019      	beq.n	8001e34 <__ssvfiscanf_r+0x70>
 8001e00:	6863      	ldr	r3, [r4, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	dd0f      	ble.n	8001e26 <__ssvfiscanf_r+0x62>
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	5cba      	ldrb	r2, [r7, r2]
 8001e0c:	0712      	lsls	r2, r2, #28
 8001e0e:	d401      	bmi.n	8001e14 <__ssvfiscanf_r+0x50>
 8001e10:	462a      	mov	r2, r5
 8001e12:	e7ec      	b.n	8001dee <__ssvfiscanf_r+0x2a>
 8001e14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8001e16:	3301      	adds	r3, #1
 8001e18:	3201      	adds	r2, #1
 8001e1a:	9245      	str	r2, [sp, #276]	; 0x114
 8001e1c:	6862      	ldr	r2, [r4, #4]
 8001e1e:	6023      	str	r3, [r4, #0]
 8001e20:	3a01      	subs	r2, #1
 8001e22:	6062      	str	r2, [r4, #4]
 8001e24:	e7ec      	b.n	8001e00 <__ssvfiscanf_r+0x3c>
 8001e26:	4621      	mov	r1, r4
 8001e28:	4630      	mov	r0, r6
 8001e2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001e2c:	4798      	blx	r3
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d0e9      	beq.n	8001e06 <__ssvfiscanf_r+0x42>
 8001e32:	e7ed      	b.n	8001e10 <__ssvfiscanf_r+0x4c>
 8001e34:	2b25      	cmp	r3, #37	; 0x25
 8001e36:	d012      	beq.n	8001e5e <__ssvfiscanf_r+0x9a>
 8001e38:	469a      	mov	sl, r3
 8001e3a:	6863      	ldr	r3, [r4, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f340 8094 	ble.w	8001f6a <__ssvfiscanf_r+0x1a6>
 8001e42:	6822      	ldr	r2, [r4, #0]
 8001e44:	7813      	ldrb	r3, [r2, #0]
 8001e46:	4553      	cmp	r3, sl
 8001e48:	f040 8131 	bne.w	80020ae <__ssvfiscanf_r+0x2ea>
 8001e4c:	6863      	ldr	r3, [r4, #4]
 8001e4e:	3201      	adds	r2, #1
 8001e50:	3b01      	subs	r3, #1
 8001e52:	6063      	str	r3, [r4, #4]
 8001e54:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8001e56:	6022      	str	r2, [r4, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	9345      	str	r3, [sp, #276]	; 0x114
 8001e5c:	e7d8      	b.n	8001e10 <__ssvfiscanf_r+0x4c>
 8001e5e:	9141      	str	r1, [sp, #260]	; 0x104
 8001e60:	9143      	str	r1, [sp, #268]	; 0x10c
 8001e62:	7853      	ldrb	r3, [r2, #1]
 8001e64:	2b2a      	cmp	r3, #42	; 0x2a
 8001e66:	bf04      	itt	eq
 8001e68:	2310      	moveq	r3, #16
 8001e6a:	1c95      	addeq	r5, r2, #2
 8001e6c:	f04f 020a 	mov.w	r2, #10
 8001e70:	bf08      	it	eq
 8001e72:	9341      	streq	r3, [sp, #260]	; 0x104
 8001e74:	46aa      	mov	sl, r5
 8001e76:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8001e7a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8001e7e:	2b09      	cmp	r3, #9
 8001e80:	d91d      	bls.n	8001ebe <__ssvfiscanf_r+0xfa>
 8001e82:	2203      	movs	r2, #3
 8001e84:	487e      	ldr	r0, [pc, #504]	; (8002080 <__ssvfiscanf_r+0x2bc>)
 8001e86:	f000 fd63 	bl	8002950 <memchr>
 8001e8a:	b140      	cbz	r0, 8001e9e <__ssvfiscanf_r+0xda>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	4655      	mov	r5, sl
 8001e90:	eba0 0009 	sub.w	r0, r0, r9
 8001e94:	fa03 f000 	lsl.w	r0, r3, r0
 8001e98:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001e9a:	4318      	orrs	r0, r3
 8001e9c:	9041      	str	r0, [sp, #260]	; 0x104
 8001e9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001ea2:	2b78      	cmp	r3, #120	; 0x78
 8001ea4:	d806      	bhi.n	8001eb4 <__ssvfiscanf_r+0xf0>
 8001ea6:	2b57      	cmp	r3, #87	; 0x57
 8001ea8:	d810      	bhi.n	8001ecc <__ssvfiscanf_r+0x108>
 8001eaa:	2b25      	cmp	r3, #37	; 0x25
 8001eac:	d0c4      	beq.n	8001e38 <__ssvfiscanf_r+0x74>
 8001eae:	d857      	bhi.n	8001f60 <__ssvfiscanf_r+0x19c>
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d065      	beq.n	8001f80 <__ssvfiscanf_r+0x1bc>
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	9347      	str	r3, [sp, #284]	; 0x11c
 8001eb8:	230a      	movs	r3, #10
 8001eba:	9342      	str	r3, [sp, #264]	; 0x108
 8001ebc:	e072      	b.n	8001fa4 <__ssvfiscanf_r+0x1e0>
 8001ebe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001ec0:	4655      	mov	r5, sl
 8001ec2:	fb02 1103 	mla	r1, r2, r3, r1
 8001ec6:	3930      	subs	r1, #48	; 0x30
 8001ec8:	9143      	str	r1, [sp, #268]	; 0x10c
 8001eca:	e7d3      	b.n	8001e74 <__ssvfiscanf_r+0xb0>
 8001ecc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8001ed0:	2a20      	cmp	r2, #32
 8001ed2:	d8ef      	bhi.n	8001eb4 <__ssvfiscanf_r+0xf0>
 8001ed4:	a101      	add	r1, pc, #4	; (adr r1, 8001edc <__ssvfiscanf_r+0x118>)
 8001ed6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001eda:	bf00      	nop
 8001edc:	08001f8f 	.word	0x08001f8f
 8001ee0:	08001eb5 	.word	0x08001eb5
 8001ee4:	08001eb5 	.word	0x08001eb5
 8001ee8:	08001fed 	.word	0x08001fed
 8001eec:	08001eb5 	.word	0x08001eb5
 8001ef0:	08001eb5 	.word	0x08001eb5
 8001ef4:	08001eb5 	.word	0x08001eb5
 8001ef8:	08001eb5 	.word	0x08001eb5
 8001efc:	08001eb5 	.word	0x08001eb5
 8001f00:	08001eb5 	.word	0x08001eb5
 8001f04:	08001eb5 	.word	0x08001eb5
 8001f08:	08002003 	.word	0x08002003
 8001f0c:	08001fd9 	.word	0x08001fd9
 8001f10:	08001f67 	.word	0x08001f67
 8001f14:	08001f67 	.word	0x08001f67
 8001f18:	08001f67 	.word	0x08001f67
 8001f1c:	08001eb5 	.word	0x08001eb5
 8001f20:	08001fdd 	.word	0x08001fdd
 8001f24:	08001eb5 	.word	0x08001eb5
 8001f28:	08001eb5 	.word	0x08001eb5
 8001f2c:	08001eb5 	.word	0x08001eb5
 8001f30:	08001eb5 	.word	0x08001eb5
 8001f34:	08002013 	.word	0x08002013
 8001f38:	08001fe5 	.word	0x08001fe5
 8001f3c:	08001f87 	.word	0x08001f87
 8001f40:	08001eb5 	.word	0x08001eb5
 8001f44:	08001eb5 	.word	0x08001eb5
 8001f48:	0800200f 	.word	0x0800200f
 8001f4c:	08001eb5 	.word	0x08001eb5
 8001f50:	08001fd9 	.word	0x08001fd9
 8001f54:	08001eb5 	.word	0x08001eb5
 8001f58:	08001eb5 	.word	0x08001eb5
 8001f5c:	08001f8f 	.word	0x08001f8f
 8001f60:	3b45      	subs	r3, #69	; 0x45
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d8a6      	bhi.n	8001eb4 <__ssvfiscanf_r+0xf0>
 8001f66:	2305      	movs	r3, #5
 8001f68:	e01b      	b.n	8001fa2 <__ssvfiscanf_r+0x1de>
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001f70:	4798      	blx	r3
 8001f72:	2800      	cmp	r0, #0
 8001f74:	f43f af65 	beq.w	8001e42 <__ssvfiscanf_r+0x7e>
 8001f78:	9844      	ldr	r0, [sp, #272]	; 0x110
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	f040 808d 	bne.w	800209a <__ssvfiscanf_r+0x2d6>
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	e08f      	b.n	80020a6 <__ssvfiscanf_r+0x2e2>
 8001f86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001f88:	f042 0220 	orr.w	r2, r2, #32
 8001f8c:	9241      	str	r2, [sp, #260]	; 0x104
 8001f8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f94:	9241      	str	r2, [sp, #260]	; 0x104
 8001f96:	2210      	movs	r2, #16
 8001f98:	2b6f      	cmp	r3, #111	; 0x6f
 8001f9a:	bf34      	ite	cc
 8001f9c:	2303      	movcc	r3, #3
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	9242      	str	r2, [sp, #264]	; 0x108
 8001fa2:	9347      	str	r3, [sp, #284]	; 0x11c
 8001fa4:	6863      	ldr	r3, [r4, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	dd42      	ble.n	8002030 <__ssvfiscanf_r+0x26c>
 8001faa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001fac:	0659      	lsls	r1, r3, #25
 8001fae:	d404      	bmi.n	8001fba <__ssvfiscanf_r+0x1f6>
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	781a      	ldrb	r2, [r3, #0]
 8001fb4:	5cba      	ldrb	r2, [r7, r2]
 8001fb6:	0712      	lsls	r2, r2, #28
 8001fb8:	d441      	bmi.n	800203e <__ssvfiscanf_r+0x27a>
 8001fba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	dc50      	bgt.n	8002062 <__ssvfiscanf_r+0x29e>
 8001fc0:	466b      	mov	r3, sp
 8001fc2:	4622      	mov	r2, r4
 8001fc4:	4630      	mov	r0, r6
 8001fc6:	a941      	add	r1, sp, #260	; 0x104
 8001fc8:	f000 fa0c 	bl	80023e4 <_scanf_chars>
 8001fcc:	2801      	cmp	r0, #1
 8001fce:	d06e      	beq.n	80020ae <__ssvfiscanf_r+0x2ea>
 8001fd0:	2802      	cmp	r0, #2
 8001fd2:	f47f af1d 	bne.w	8001e10 <__ssvfiscanf_r+0x4c>
 8001fd6:	e7cf      	b.n	8001f78 <__ssvfiscanf_r+0x1b4>
 8001fd8:	220a      	movs	r2, #10
 8001fda:	e7dd      	b.n	8001f98 <__ssvfiscanf_r+0x1d4>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	9342      	str	r3, [sp, #264]	; 0x108
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e7de      	b.n	8001fa2 <__ssvfiscanf_r+0x1de>
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	9342      	str	r3, [sp, #264]	; 0x108
 8001fe8:	2304      	movs	r3, #4
 8001fea:	e7da      	b.n	8001fa2 <__ssvfiscanf_r+0x1de>
 8001fec:	4629      	mov	r1, r5
 8001fee:	4640      	mov	r0, r8
 8001ff0:	f000 fb4a 	bl	8002688 <__sccl>
 8001ff4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001ff6:	4605      	mov	r5, r0
 8001ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ffc:	9341      	str	r3, [sp, #260]	; 0x104
 8001ffe:	2301      	movs	r3, #1
 8002000:	e7cf      	b.n	8001fa2 <__ssvfiscanf_r+0x1de>
 8002002:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002008:	9341      	str	r3, [sp, #260]	; 0x104
 800200a:	2300      	movs	r3, #0
 800200c:	e7c9      	b.n	8001fa2 <__ssvfiscanf_r+0x1de>
 800200e:	2302      	movs	r3, #2
 8002010:	e7c7      	b.n	8001fa2 <__ssvfiscanf_r+0x1de>
 8002012:	9841      	ldr	r0, [sp, #260]	; 0x104
 8002014:	06c3      	lsls	r3, r0, #27
 8002016:	f53f aefb 	bmi.w	8001e10 <__ssvfiscanf_r+0x4c>
 800201a:	9b00      	ldr	r3, [sp, #0]
 800201c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800201e:	1d19      	adds	r1, r3, #4
 8002020:	9100      	str	r1, [sp, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f010 0f01 	tst.w	r0, #1
 8002028:	bf14      	ite	ne
 800202a:	801a      	strhne	r2, [r3, #0]
 800202c:	601a      	streq	r2, [r3, #0]
 800202e:	e6ef      	b.n	8001e10 <__ssvfiscanf_r+0x4c>
 8002030:	4621      	mov	r1, r4
 8002032:	4630      	mov	r0, r6
 8002034:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002036:	4798      	blx	r3
 8002038:	2800      	cmp	r0, #0
 800203a:	d0b6      	beq.n	8001faa <__ssvfiscanf_r+0x1e6>
 800203c:	e79c      	b.n	8001f78 <__ssvfiscanf_r+0x1b4>
 800203e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002040:	3201      	adds	r2, #1
 8002042:	9245      	str	r2, [sp, #276]	; 0x114
 8002044:	6862      	ldr	r2, [r4, #4]
 8002046:	3a01      	subs	r2, #1
 8002048:	2a00      	cmp	r2, #0
 800204a:	6062      	str	r2, [r4, #4]
 800204c:	dd02      	ble.n	8002054 <__ssvfiscanf_r+0x290>
 800204e:	3301      	adds	r3, #1
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	e7ad      	b.n	8001fb0 <__ssvfiscanf_r+0x1ec>
 8002054:	4621      	mov	r1, r4
 8002056:	4630      	mov	r0, r6
 8002058:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800205a:	4798      	blx	r3
 800205c:	2800      	cmp	r0, #0
 800205e:	d0a7      	beq.n	8001fb0 <__ssvfiscanf_r+0x1ec>
 8002060:	e78a      	b.n	8001f78 <__ssvfiscanf_r+0x1b4>
 8002062:	2b04      	cmp	r3, #4
 8002064:	dc0e      	bgt.n	8002084 <__ssvfiscanf_r+0x2c0>
 8002066:	466b      	mov	r3, sp
 8002068:	4622      	mov	r2, r4
 800206a:	4630      	mov	r0, r6
 800206c:	a941      	add	r1, sp, #260	; 0x104
 800206e:	f000 fa13 	bl	8002498 <_scanf_i>
 8002072:	e7ab      	b.n	8001fcc <__ssvfiscanf_r+0x208>
 8002074:	08001d11 	.word	0x08001d11
 8002078:	08001d8b 	.word	0x08001d8b
 800207c:	08002d71 	.word	0x08002d71
 8002080:	08002d28 	.word	0x08002d28
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <__ssvfiscanf_r+0x2f0>)
 8002086:	2b00      	cmp	r3, #0
 8002088:	f43f aec2 	beq.w	8001e10 <__ssvfiscanf_r+0x4c>
 800208c:	466b      	mov	r3, sp
 800208e:	4622      	mov	r2, r4
 8002090:	4630      	mov	r0, r6
 8002092:	a941      	add	r1, sp, #260	; 0x104
 8002094:	f3af 8000 	nop.w
 8002098:	e798      	b.n	8001fcc <__ssvfiscanf_r+0x208>
 800209a:	89a3      	ldrh	r3, [r4, #12]
 800209c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80020a0:	bf18      	it	ne
 80020a2:	f04f 30ff 	movne.w	r0, #4294967295
 80020a6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80020aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020ae:	9844      	ldr	r0, [sp, #272]	; 0x110
 80020b0:	e7f9      	b.n	80020a6 <__ssvfiscanf_r+0x2e2>
 80020b2:	bf00      	nop
 80020b4:	00000000 	.word	0x00000000

080020b8 <_printf_common>:
 80020b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020bc:	4616      	mov	r6, r2
 80020be:	4699      	mov	r9, r3
 80020c0:	688a      	ldr	r2, [r1, #8]
 80020c2:	690b      	ldr	r3, [r1, #16]
 80020c4:	4607      	mov	r7, r0
 80020c6:	4293      	cmp	r3, r2
 80020c8:	bfb8      	it	lt
 80020ca:	4613      	movlt	r3, r2
 80020cc:	6033      	str	r3, [r6, #0]
 80020ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020d2:	460c      	mov	r4, r1
 80020d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020d8:	b10a      	cbz	r2, 80020de <_printf_common+0x26>
 80020da:	3301      	adds	r3, #1
 80020dc:	6033      	str	r3, [r6, #0]
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	0699      	lsls	r1, r3, #26
 80020e2:	bf42      	ittt	mi
 80020e4:	6833      	ldrmi	r3, [r6, #0]
 80020e6:	3302      	addmi	r3, #2
 80020e8:	6033      	strmi	r3, [r6, #0]
 80020ea:	6825      	ldr	r5, [r4, #0]
 80020ec:	f015 0506 	ands.w	r5, r5, #6
 80020f0:	d106      	bne.n	8002100 <_printf_common+0x48>
 80020f2:	f104 0a19 	add.w	sl, r4, #25
 80020f6:	68e3      	ldr	r3, [r4, #12]
 80020f8:	6832      	ldr	r2, [r6, #0]
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	42ab      	cmp	r3, r5
 80020fe:	dc28      	bgt.n	8002152 <_printf_common+0x9a>
 8002100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002104:	1e13      	subs	r3, r2, #0
 8002106:	6822      	ldr	r2, [r4, #0]
 8002108:	bf18      	it	ne
 800210a:	2301      	movne	r3, #1
 800210c:	0692      	lsls	r2, r2, #26
 800210e:	d42d      	bmi.n	800216c <_printf_common+0xb4>
 8002110:	4649      	mov	r1, r9
 8002112:	4638      	mov	r0, r7
 8002114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002118:	47c0      	blx	r8
 800211a:	3001      	adds	r0, #1
 800211c:	d020      	beq.n	8002160 <_printf_common+0xa8>
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	68e5      	ldr	r5, [r4, #12]
 8002122:	f003 0306 	and.w	r3, r3, #6
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf18      	it	ne
 800212a:	2500      	movne	r5, #0
 800212c:	6832      	ldr	r2, [r6, #0]
 800212e:	f04f 0600 	mov.w	r6, #0
 8002132:	68a3      	ldr	r3, [r4, #8]
 8002134:	bf08      	it	eq
 8002136:	1aad      	subeq	r5, r5, r2
 8002138:	6922      	ldr	r2, [r4, #16]
 800213a:	bf08      	it	eq
 800213c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002140:	4293      	cmp	r3, r2
 8002142:	bfc4      	itt	gt
 8002144:	1a9b      	subgt	r3, r3, r2
 8002146:	18ed      	addgt	r5, r5, r3
 8002148:	341a      	adds	r4, #26
 800214a:	42b5      	cmp	r5, r6
 800214c:	d11a      	bne.n	8002184 <_printf_common+0xcc>
 800214e:	2000      	movs	r0, #0
 8002150:	e008      	b.n	8002164 <_printf_common+0xac>
 8002152:	2301      	movs	r3, #1
 8002154:	4652      	mov	r2, sl
 8002156:	4649      	mov	r1, r9
 8002158:	4638      	mov	r0, r7
 800215a:	47c0      	blx	r8
 800215c:	3001      	adds	r0, #1
 800215e:	d103      	bne.n	8002168 <_printf_common+0xb0>
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002168:	3501      	adds	r5, #1
 800216a:	e7c4      	b.n	80020f6 <_printf_common+0x3e>
 800216c:	2030      	movs	r0, #48	; 0x30
 800216e:	18e1      	adds	r1, r4, r3
 8002170:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800217a:	4422      	add	r2, r4
 800217c:	3302      	adds	r3, #2
 800217e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002182:	e7c5      	b.n	8002110 <_printf_common+0x58>
 8002184:	2301      	movs	r3, #1
 8002186:	4622      	mov	r2, r4
 8002188:	4649      	mov	r1, r9
 800218a:	4638      	mov	r0, r7
 800218c:	47c0      	blx	r8
 800218e:	3001      	adds	r0, #1
 8002190:	d0e6      	beq.n	8002160 <_printf_common+0xa8>
 8002192:	3601      	adds	r6, #1
 8002194:	e7d9      	b.n	800214a <_printf_common+0x92>
	...

08002198 <_printf_i>:
 8002198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800219c:	7e0f      	ldrb	r7, [r1, #24]
 800219e:	4691      	mov	r9, r2
 80021a0:	2f78      	cmp	r7, #120	; 0x78
 80021a2:	4680      	mov	r8, r0
 80021a4:	460c      	mov	r4, r1
 80021a6:	469a      	mov	sl, r3
 80021a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80021aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80021ae:	d807      	bhi.n	80021c0 <_printf_i+0x28>
 80021b0:	2f62      	cmp	r7, #98	; 0x62
 80021b2:	d80a      	bhi.n	80021ca <_printf_i+0x32>
 80021b4:	2f00      	cmp	r7, #0
 80021b6:	f000 80d9 	beq.w	800236c <_printf_i+0x1d4>
 80021ba:	2f58      	cmp	r7, #88	; 0x58
 80021bc:	f000 80a4 	beq.w	8002308 <_printf_i+0x170>
 80021c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80021c8:	e03a      	b.n	8002240 <_printf_i+0xa8>
 80021ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80021ce:	2b15      	cmp	r3, #21
 80021d0:	d8f6      	bhi.n	80021c0 <_printf_i+0x28>
 80021d2:	a101      	add	r1, pc, #4	; (adr r1, 80021d8 <_printf_i+0x40>)
 80021d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80021d8:	08002231 	.word	0x08002231
 80021dc:	08002245 	.word	0x08002245
 80021e0:	080021c1 	.word	0x080021c1
 80021e4:	080021c1 	.word	0x080021c1
 80021e8:	080021c1 	.word	0x080021c1
 80021ec:	080021c1 	.word	0x080021c1
 80021f0:	08002245 	.word	0x08002245
 80021f4:	080021c1 	.word	0x080021c1
 80021f8:	080021c1 	.word	0x080021c1
 80021fc:	080021c1 	.word	0x080021c1
 8002200:	080021c1 	.word	0x080021c1
 8002204:	08002353 	.word	0x08002353
 8002208:	08002275 	.word	0x08002275
 800220c:	08002335 	.word	0x08002335
 8002210:	080021c1 	.word	0x080021c1
 8002214:	080021c1 	.word	0x080021c1
 8002218:	08002375 	.word	0x08002375
 800221c:	080021c1 	.word	0x080021c1
 8002220:	08002275 	.word	0x08002275
 8002224:	080021c1 	.word	0x080021c1
 8002228:	080021c1 	.word	0x080021c1
 800222c:	0800233d 	.word	0x0800233d
 8002230:	682b      	ldr	r3, [r5, #0]
 8002232:	1d1a      	adds	r2, r3, #4
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	602a      	str	r2, [r5, #0]
 8002238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800223c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002240:	2301      	movs	r3, #1
 8002242:	e0a4      	b.n	800238e <_printf_i+0x1f6>
 8002244:	6820      	ldr	r0, [r4, #0]
 8002246:	6829      	ldr	r1, [r5, #0]
 8002248:	0606      	lsls	r6, r0, #24
 800224a:	f101 0304 	add.w	r3, r1, #4
 800224e:	d50a      	bpl.n	8002266 <_printf_i+0xce>
 8002250:	680e      	ldr	r6, [r1, #0]
 8002252:	602b      	str	r3, [r5, #0]
 8002254:	2e00      	cmp	r6, #0
 8002256:	da03      	bge.n	8002260 <_printf_i+0xc8>
 8002258:	232d      	movs	r3, #45	; 0x2d
 800225a:	4276      	negs	r6, r6
 800225c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002260:	230a      	movs	r3, #10
 8002262:	485e      	ldr	r0, [pc, #376]	; (80023dc <_printf_i+0x244>)
 8002264:	e019      	b.n	800229a <_printf_i+0x102>
 8002266:	680e      	ldr	r6, [r1, #0]
 8002268:	f010 0f40 	tst.w	r0, #64	; 0x40
 800226c:	602b      	str	r3, [r5, #0]
 800226e:	bf18      	it	ne
 8002270:	b236      	sxthne	r6, r6
 8002272:	e7ef      	b.n	8002254 <_printf_i+0xbc>
 8002274:	682b      	ldr	r3, [r5, #0]
 8002276:	6820      	ldr	r0, [r4, #0]
 8002278:	1d19      	adds	r1, r3, #4
 800227a:	6029      	str	r1, [r5, #0]
 800227c:	0601      	lsls	r1, r0, #24
 800227e:	d501      	bpl.n	8002284 <_printf_i+0xec>
 8002280:	681e      	ldr	r6, [r3, #0]
 8002282:	e002      	b.n	800228a <_printf_i+0xf2>
 8002284:	0646      	lsls	r6, r0, #25
 8002286:	d5fb      	bpl.n	8002280 <_printf_i+0xe8>
 8002288:	881e      	ldrh	r6, [r3, #0]
 800228a:	2f6f      	cmp	r7, #111	; 0x6f
 800228c:	bf0c      	ite	eq
 800228e:	2308      	moveq	r3, #8
 8002290:	230a      	movne	r3, #10
 8002292:	4852      	ldr	r0, [pc, #328]	; (80023dc <_printf_i+0x244>)
 8002294:	2100      	movs	r1, #0
 8002296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800229a:	6865      	ldr	r5, [r4, #4]
 800229c:	2d00      	cmp	r5, #0
 800229e:	bfa8      	it	ge
 80022a0:	6821      	ldrge	r1, [r4, #0]
 80022a2:	60a5      	str	r5, [r4, #8]
 80022a4:	bfa4      	itt	ge
 80022a6:	f021 0104 	bicge.w	r1, r1, #4
 80022aa:	6021      	strge	r1, [r4, #0]
 80022ac:	b90e      	cbnz	r6, 80022b2 <_printf_i+0x11a>
 80022ae:	2d00      	cmp	r5, #0
 80022b0:	d04d      	beq.n	800234e <_printf_i+0x1b6>
 80022b2:	4615      	mov	r5, r2
 80022b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80022b8:	fb03 6711 	mls	r7, r3, r1, r6
 80022bc:	5dc7      	ldrb	r7, [r0, r7]
 80022be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80022c2:	4637      	mov	r7, r6
 80022c4:	42bb      	cmp	r3, r7
 80022c6:	460e      	mov	r6, r1
 80022c8:	d9f4      	bls.n	80022b4 <_printf_i+0x11c>
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d10b      	bne.n	80022e6 <_printf_i+0x14e>
 80022ce:	6823      	ldr	r3, [r4, #0]
 80022d0:	07de      	lsls	r6, r3, #31
 80022d2:	d508      	bpl.n	80022e6 <_printf_i+0x14e>
 80022d4:	6923      	ldr	r3, [r4, #16]
 80022d6:	6861      	ldr	r1, [r4, #4]
 80022d8:	4299      	cmp	r1, r3
 80022da:	bfde      	ittt	le
 80022dc:	2330      	movle	r3, #48	; 0x30
 80022de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80022e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80022e6:	1b52      	subs	r2, r2, r5
 80022e8:	6122      	str	r2, [r4, #16]
 80022ea:	464b      	mov	r3, r9
 80022ec:	4621      	mov	r1, r4
 80022ee:	4640      	mov	r0, r8
 80022f0:	f8cd a000 	str.w	sl, [sp]
 80022f4:	aa03      	add	r2, sp, #12
 80022f6:	f7ff fedf 	bl	80020b8 <_printf_common>
 80022fa:	3001      	adds	r0, #1
 80022fc:	d14c      	bne.n	8002398 <_printf_i+0x200>
 80022fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002302:	b004      	add	sp, #16
 8002304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002308:	4834      	ldr	r0, [pc, #208]	; (80023dc <_printf_i+0x244>)
 800230a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800230e:	6829      	ldr	r1, [r5, #0]
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	f851 6b04 	ldr.w	r6, [r1], #4
 8002316:	6029      	str	r1, [r5, #0]
 8002318:	061d      	lsls	r5, r3, #24
 800231a:	d514      	bpl.n	8002346 <_printf_i+0x1ae>
 800231c:	07df      	lsls	r7, r3, #31
 800231e:	bf44      	itt	mi
 8002320:	f043 0320 	orrmi.w	r3, r3, #32
 8002324:	6023      	strmi	r3, [r4, #0]
 8002326:	b91e      	cbnz	r6, 8002330 <_printf_i+0x198>
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	f023 0320 	bic.w	r3, r3, #32
 800232e:	6023      	str	r3, [r4, #0]
 8002330:	2310      	movs	r3, #16
 8002332:	e7af      	b.n	8002294 <_printf_i+0xfc>
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	f043 0320 	orr.w	r3, r3, #32
 800233a:	6023      	str	r3, [r4, #0]
 800233c:	2378      	movs	r3, #120	; 0x78
 800233e:	4828      	ldr	r0, [pc, #160]	; (80023e0 <_printf_i+0x248>)
 8002340:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002344:	e7e3      	b.n	800230e <_printf_i+0x176>
 8002346:	0659      	lsls	r1, r3, #25
 8002348:	bf48      	it	mi
 800234a:	b2b6      	uxthmi	r6, r6
 800234c:	e7e6      	b.n	800231c <_printf_i+0x184>
 800234e:	4615      	mov	r5, r2
 8002350:	e7bb      	b.n	80022ca <_printf_i+0x132>
 8002352:	682b      	ldr	r3, [r5, #0]
 8002354:	6826      	ldr	r6, [r4, #0]
 8002356:	1d18      	adds	r0, r3, #4
 8002358:	6961      	ldr	r1, [r4, #20]
 800235a:	6028      	str	r0, [r5, #0]
 800235c:	0635      	lsls	r5, r6, #24
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	d501      	bpl.n	8002366 <_printf_i+0x1ce>
 8002362:	6019      	str	r1, [r3, #0]
 8002364:	e002      	b.n	800236c <_printf_i+0x1d4>
 8002366:	0670      	lsls	r0, r6, #25
 8002368:	d5fb      	bpl.n	8002362 <_printf_i+0x1ca>
 800236a:	8019      	strh	r1, [r3, #0]
 800236c:	2300      	movs	r3, #0
 800236e:	4615      	mov	r5, r2
 8002370:	6123      	str	r3, [r4, #16]
 8002372:	e7ba      	b.n	80022ea <_printf_i+0x152>
 8002374:	682b      	ldr	r3, [r5, #0]
 8002376:	2100      	movs	r1, #0
 8002378:	1d1a      	adds	r2, r3, #4
 800237a:	602a      	str	r2, [r5, #0]
 800237c:	681d      	ldr	r5, [r3, #0]
 800237e:	6862      	ldr	r2, [r4, #4]
 8002380:	4628      	mov	r0, r5
 8002382:	f000 fae5 	bl	8002950 <memchr>
 8002386:	b108      	cbz	r0, 800238c <_printf_i+0x1f4>
 8002388:	1b40      	subs	r0, r0, r5
 800238a:	6060      	str	r0, [r4, #4]
 800238c:	6863      	ldr	r3, [r4, #4]
 800238e:	6123      	str	r3, [r4, #16]
 8002390:	2300      	movs	r3, #0
 8002392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002396:	e7a8      	b.n	80022ea <_printf_i+0x152>
 8002398:	462a      	mov	r2, r5
 800239a:	4649      	mov	r1, r9
 800239c:	4640      	mov	r0, r8
 800239e:	6923      	ldr	r3, [r4, #16]
 80023a0:	47d0      	blx	sl
 80023a2:	3001      	adds	r0, #1
 80023a4:	d0ab      	beq.n	80022fe <_printf_i+0x166>
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	079b      	lsls	r3, r3, #30
 80023aa:	d413      	bmi.n	80023d4 <_printf_i+0x23c>
 80023ac:	68e0      	ldr	r0, [r4, #12]
 80023ae:	9b03      	ldr	r3, [sp, #12]
 80023b0:	4298      	cmp	r0, r3
 80023b2:	bfb8      	it	lt
 80023b4:	4618      	movlt	r0, r3
 80023b6:	e7a4      	b.n	8002302 <_printf_i+0x16a>
 80023b8:	2301      	movs	r3, #1
 80023ba:	4632      	mov	r2, r6
 80023bc:	4649      	mov	r1, r9
 80023be:	4640      	mov	r0, r8
 80023c0:	47d0      	blx	sl
 80023c2:	3001      	adds	r0, #1
 80023c4:	d09b      	beq.n	80022fe <_printf_i+0x166>
 80023c6:	3501      	adds	r5, #1
 80023c8:	68e3      	ldr	r3, [r4, #12]
 80023ca:	9903      	ldr	r1, [sp, #12]
 80023cc:	1a5b      	subs	r3, r3, r1
 80023ce:	42ab      	cmp	r3, r5
 80023d0:	dcf2      	bgt.n	80023b8 <_printf_i+0x220>
 80023d2:	e7eb      	b.n	80023ac <_printf_i+0x214>
 80023d4:	2500      	movs	r5, #0
 80023d6:	f104 0619 	add.w	r6, r4, #25
 80023da:	e7f5      	b.n	80023c8 <_printf_i+0x230>
 80023dc:	08002d33 	.word	0x08002d33
 80023e0:	08002d44 	.word	0x08002d44

080023e4 <_scanf_chars>:
 80023e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023e8:	4615      	mov	r5, r2
 80023ea:	688a      	ldr	r2, [r1, #8]
 80023ec:	4680      	mov	r8, r0
 80023ee:	460c      	mov	r4, r1
 80023f0:	b932      	cbnz	r2, 8002400 <_scanf_chars+0x1c>
 80023f2:	698a      	ldr	r2, [r1, #24]
 80023f4:	2a00      	cmp	r2, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2201      	moveq	r2, #1
 80023fa:	f04f 32ff 	movne.w	r2, #4294967295
 80023fe:	608a      	str	r2, [r1, #8]
 8002400:	2700      	movs	r7, #0
 8002402:	6822      	ldr	r2, [r4, #0]
 8002404:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002494 <_scanf_chars+0xb0>
 8002408:	06d1      	lsls	r1, r2, #27
 800240a:	bf5f      	itttt	pl
 800240c:	681a      	ldrpl	r2, [r3, #0]
 800240e:	1d11      	addpl	r1, r2, #4
 8002410:	6019      	strpl	r1, [r3, #0]
 8002412:	6816      	ldrpl	r6, [r2, #0]
 8002414:	69a0      	ldr	r0, [r4, #24]
 8002416:	b188      	cbz	r0, 800243c <_scanf_chars+0x58>
 8002418:	2801      	cmp	r0, #1
 800241a:	d107      	bne.n	800242c <_scanf_chars+0x48>
 800241c:	682b      	ldr	r3, [r5, #0]
 800241e:	781a      	ldrb	r2, [r3, #0]
 8002420:	6963      	ldr	r3, [r4, #20]
 8002422:	5c9b      	ldrb	r3, [r3, r2]
 8002424:	b953      	cbnz	r3, 800243c <_scanf_chars+0x58>
 8002426:	2f00      	cmp	r7, #0
 8002428:	d031      	beq.n	800248e <_scanf_chars+0xaa>
 800242a:	e022      	b.n	8002472 <_scanf_chars+0x8e>
 800242c:	2802      	cmp	r0, #2
 800242e:	d120      	bne.n	8002472 <_scanf_chars+0x8e>
 8002430:	682b      	ldr	r3, [r5, #0]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	f813 3009 	ldrb.w	r3, [r3, r9]
 8002438:	071b      	lsls	r3, r3, #28
 800243a:	d41a      	bmi.n	8002472 <_scanf_chars+0x8e>
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	3701      	adds	r7, #1
 8002440:	06da      	lsls	r2, r3, #27
 8002442:	bf5e      	ittt	pl
 8002444:	682b      	ldrpl	r3, [r5, #0]
 8002446:	781b      	ldrbpl	r3, [r3, #0]
 8002448:	f806 3b01 	strbpl.w	r3, [r6], #1
 800244c:	682a      	ldr	r2, [r5, #0]
 800244e:	686b      	ldr	r3, [r5, #4]
 8002450:	3201      	adds	r2, #1
 8002452:	602a      	str	r2, [r5, #0]
 8002454:	68a2      	ldr	r2, [r4, #8]
 8002456:	3b01      	subs	r3, #1
 8002458:	3a01      	subs	r2, #1
 800245a:	606b      	str	r3, [r5, #4]
 800245c:	60a2      	str	r2, [r4, #8]
 800245e:	b142      	cbz	r2, 8002472 <_scanf_chars+0x8e>
 8002460:	2b00      	cmp	r3, #0
 8002462:	dcd7      	bgt.n	8002414 <_scanf_chars+0x30>
 8002464:	4629      	mov	r1, r5
 8002466:	4640      	mov	r0, r8
 8002468:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800246c:	4798      	blx	r3
 800246e:	2800      	cmp	r0, #0
 8002470:	d0d0      	beq.n	8002414 <_scanf_chars+0x30>
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	f013 0310 	ands.w	r3, r3, #16
 8002478:	d105      	bne.n	8002486 <_scanf_chars+0xa2>
 800247a:	68e2      	ldr	r2, [r4, #12]
 800247c:	3201      	adds	r2, #1
 800247e:	60e2      	str	r2, [r4, #12]
 8002480:	69a2      	ldr	r2, [r4, #24]
 8002482:	b102      	cbz	r2, 8002486 <_scanf_chars+0xa2>
 8002484:	7033      	strb	r3, [r6, #0]
 8002486:	2000      	movs	r0, #0
 8002488:	6923      	ldr	r3, [r4, #16]
 800248a:	443b      	add	r3, r7
 800248c:	6123      	str	r3, [r4, #16]
 800248e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002492:	bf00      	nop
 8002494:	08002d71 	.word	0x08002d71

08002498 <_scanf_i>:
 8002498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800249c:	460c      	mov	r4, r1
 800249e:	4698      	mov	r8, r3
 80024a0:	4b75      	ldr	r3, [pc, #468]	; (8002678 <_scanf_i+0x1e0>)
 80024a2:	b087      	sub	sp, #28
 80024a4:	4682      	mov	sl, r0
 80024a6:	4616      	mov	r6, r2
 80024a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024ac:	ab03      	add	r3, sp, #12
 80024ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80024b2:	4b72      	ldr	r3, [pc, #456]	; (800267c <_scanf_i+0x1e4>)
 80024b4:	69a1      	ldr	r1, [r4, #24]
 80024b6:	4a72      	ldr	r2, [pc, #456]	; (8002680 <_scanf_i+0x1e8>)
 80024b8:	4627      	mov	r7, r4
 80024ba:	2903      	cmp	r1, #3
 80024bc:	bf18      	it	ne
 80024be:	461a      	movne	r2, r3
 80024c0:	68a3      	ldr	r3, [r4, #8]
 80024c2:	9201      	str	r2, [sp, #4]
 80024c4:	1e5a      	subs	r2, r3, #1
 80024c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80024ca:	bf81      	itttt	hi
 80024cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80024d0:	eb03 0905 	addhi.w	r9, r3, r5
 80024d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80024d8:	60a3      	strhi	r3, [r4, #8]
 80024da:	f857 3b1c 	ldr.w	r3, [r7], #28
 80024de:	bf98      	it	ls
 80024e0:	f04f 0900 	movls.w	r9, #0
 80024e4:	463d      	mov	r5, r7
 80024e6:	f04f 0b00 	mov.w	fp, #0
 80024ea:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80024ee:	6023      	str	r3, [r4, #0]
 80024f0:	6831      	ldr	r1, [r6, #0]
 80024f2:	ab03      	add	r3, sp, #12
 80024f4:	2202      	movs	r2, #2
 80024f6:	7809      	ldrb	r1, [r1, #0]
 80024f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80024fc:	f000 fa28 	bl	8002950 <memchr>
 8002500:	b328      	cbz	r0, 800254e <_scanf_i+0xb6>
 8002502:	f1bb 0f01 	cmp.w	fp, #1
 8002506:	d159      	bne.n	80025bc <_scanf_i+0x124>
 8002508:	6862      	ldr	r2, [r4, #4]
 800250a:	b92a      	cbnz	r2, 8002518 <_scanf_i+0x80>
 800250c:	2308      	movs	r3, #8
 800250e:	6822      	ldr	r2, [r4, #0]
 8002510:	6063      	str	r3, [r4, #4]
 8002512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002516:	6022      	str	r2, [r4, #0]
 8002518:	6822      	ldr	r2, [r4, #0]
 800251a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800251e:	6022      	str	r2, [r4, #0]
 8002520:	68a2      	ldr	r2, [r4, #8]
 8002522:	1e51      	subs	r1, r2, #1
 8002524:	60a1      	str	r1, [r4, #8]
 8002526:	b192      	cbz	r2, 800254e <_scanf_i+0xb6>
 8002528:	6832      	ldr	r2, [r6, #0]
 800252a:	1c51      	adds	r1, r2, #1
 800252c:	6031      	str	r1, [r6, #0]
 800252e:	7812      	ldrb	r2, [r2, #0]
 8002530:	f805 2b01 	strb.w	r2, [r5], #1
 8002534:	6872      	ldr	r2, [r6, #4]
 8002536:	3a01      	subs	r2, #1
 8002538:	2a00      	cmp	r2, #0
 800253a:	6072      	str	r2, [r6, #4]
 800253c:	dc07      	bgt.n	800254e <_scanf_i+0xb6>
 800253e:	4631      	mov	r1, r6
 8002540:	4650      	mov	r0, sl
 8002542:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8002546:	4790      	blx	r2
 8002548:	2800      	cmp	r0, #0
 800254a:	f040 8085 	bne.w	8002658 <_scanf_i+0x1c0>
 800254e:	f10b 0b01 	add.w	fp, fp, #1
 8002552:	f1bb 0f03 	cmp.w	fp, #3
 8002556:	d1cb      	bne.n	80024f0 <_scanf_i+0x58>
 8002558:	6863      	ldr	r3, [r4, #4]
 800255a:	b90b      	cbnz	r3, 8002560 <_scanf_i+0xc8>
 800255c:	230a      	movs	r3, #10
 800255e:	6063      	str	r3, [r4, #4]
 8002560:	6863      	ldr	r3, [r4, #4]
 8002562:	4948      	ldr	r1, [pc, #288]	; (8002684 <_scanf_i+0x1ec>)
 8002564:	6960      	ldr	r0, [r4, #20]
 8002566:	1ac9      	subs	r1, r1, r3
 8002568:	f000 f88e 	bl	8002688 <__sccl>
 800256c:	f04f 0b00 	mov.w	fp, #0
 8002570:	68a3      	ldr	r3, [r4, #8]
 8002572:	6822      	ldr	r2, [r4, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d03d      	beq.n	80025f4 <_scanf_i+0x15c>
 8002578:	6831      	ldr	r1, [r6, #0]
 800257a:	6960      	ldr	r0, [r4, #20]
 800257c:	f891 c000 	ldrb.w	ip, [r1]
 8002580:	f810 000c 	ldrb.w	r0, [r0, ip]
 8002584:	2800      	cmp	r0, #0
 8002586:	d035      	beq.n	80025f4 <_scanf_i+0x15c>
 8002588:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800258c:	d124      	bne.n	80025d8 <_scanf_i+0x140>
 800258e:	0510      	lsls	r0, r2, #20
 8002590:	d522      	bpl.n	80025d8 <_scanf_i+0x140>
 8002592:	f10b 0b01 	add.w	fp, fp, #1
 8002596:	f1b9 0f00 	cmp.w	r9, #0
 800259a:	d003      	beq.n	80025a4 <_scanf_i+0x10c>
 800259c:	3301      	adds	r3, #1
 800259e:	f109 39ff 	add.w	r9, r9, #4294967295
 80025a2:	60a3      	str	r3, [r4, #8]
 80025a4:	6873      	ldr	r3, [r6, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	6073      	str	r3, [r6, #4]
 80025ac:	dd1b      	ble.n	80025e6 <_scanf_i+0x14e>
 80025ae:	6833      	ldr	r3, [r6, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	6033      	str	r3, [r6, #0]
 80025b4:	68a3      	ldr	r3, [r4, #8]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	60a3      	str	r3, [r4, #8]
 80025ba:	e7d9      	b.n	8002570 <_scanf_i+0xd8>
 80025bc:	f1bb 0f02 	cmp.w	fp, #2
 80025c0:	d1ae      	bne.n	8002520 <_scanf_i+0x88>
 80025c2:	6822      	ldr	r2, [r4, #0]
 80025c4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80025c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80025cc:	d1bf      	bne.n	800254e <_scanf_i+0xb6>
 80025ce:	2310      	movs	r3, #16
 80025d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d4:	6063      	str	r3, [r4, #4]
 80025d6:	e7a2      	b.n	800251e <_scanf_i+0x86>
 80025d8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80025dc:	6022      	str	r2, [r4, #0]
 80025de:	780b      	ldrb	r3, [r1, #0]
 80025e0:	f805 3b01 	strb.w	r3, [r5], #1
 80025e4:	e7de      	b.n	80025a4 <_scanf_i+0x10c>
 80025e6:	4631      	mov	r1, r6
 80025e8:	4650      	mov	r0, sl
 80025ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80025ee:	4798      	blx	r3
 80025f0:	2800      	cmp	r0, #0
 80025f2:	d0df      	beq.n	80025b4 <_scanf_i+0x11c>
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	05db      	lsls	r3, r3, #23
 80025f8:	d50d      	bpl.n	8002616 <_scanf_i+0x17e>
 80025fa:	42bd      	cmp	r5, r7
 80025fc:	d909      	bls.n	8002612 <_scanf_i+0x17a>
 80025fe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002602:	4632      	mov	r2, r6
 8002604:	4650      	mov	r0, sl
 8002606:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800260a:	f105 39ff 	add.w	r9, r5, #4294967295
 800260e:	4798      	blx	r3
 8002610:	464d      	mov	r5, r9
 8002612:	42bd      	cmp	r5, r7
 8002614:	d02d      	beq.n	8002672 <_scanf_i+0x1da>
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	f012 0210 	ands.w	r2, r2, #16
 800261c:	d113      	bne.n	8002646 <_scanf_i+0x1ae>
 800261e:	702a      	strb	r2, [r5, #0]
 8002620:	4639      	mov	r1, r7
 8002622:	6863      	ldr	r3, [r4, #4]
 8002624:	4650      	mov	r0, sl
 8002626:	9e01      	ldr	r6, [sp, #4]
 8002628:	47b0      	blx	r6
 800262a:	6821      	ldr	r1, [r4, #0]
 800262c:	f8d8 3000 	ldr.w	r3, [r8]
 8002630:	f011 0f20 	tst.w	r1, #32
 8002634:	d013      	beq.n	800265e <_scanf_i+0x1c6>
 8002636:	1d1a      	adds	r2, r3, #4
 8002638:	f8c8 2000 	str.w	r2, [r8]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6018      	str	r0, [r3, #0]
 8002640:	68e3      	ldr	r3, [r4, #12]
 8002642:	3301      	adds	r3, #1
 8002644:	60e3      	str	r3, [r4, #12]
 8002646:	2000      	movs	r0, #0
 8002648:	1bed      	subs	r5, r5, r7
 800264a:	44ab      	add	fp, r5
 800264c:	6925      	ldr	r5, [r4, #16]
 800264e:	445d      	add	r5, fp
 8002650:	6125      	str	r5, [r4, #16]
 8002652:	b007      	add	sp, #28
 8002654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002658:	f04f 0b00 	mov.w	fp, #0
 800265c:	e7ca      	b.n	80025f4 <_scanf_i+0x15c>
 800265e:	1d1a      	adds	r2, r3, #4
 8002660:	f8c8 2000 	str.w	r2, [r8]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f011 0f01 	tst.w	r1, #1
 800266a:	bf14      	ite	ne
 800266c:	8018      	strhne	r0, [r3, #0]
 800266e:	6018      	streq	r0, [r3, #0]
 8002670:	e7e6      	b.n	8002640 <_scanf_i+0x1a8>
 8002672:	2001      	movs	r0, #1
 8002674:	e7ed      	b.n	8002652 <_scanf_i+0x1ba>
 8002676:	bf00      	nop
 8002678:	08002cec 	.word	0x08002cec
 800267c:	080028d9 	.word	0x080028d9
 8002680:	080027f1 	.word	0x080027f1
 8002684:	08002d6e 	.word	0x08002d6e

08002688 <__sccl>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	780b      	ldrb	r3, [r1, #0]
 800268c:	4604      	mov	r4, r0
 800268e:	2b5e      	cmp	r3, #94	; 0x5e
 8002690:	bf13      	iteet	ne
 8002692:	2200      	movne	r2, #0
 8002694:	2201      	moveq	r2, #1
 8002696:	784b      	ldrbeq	r3, [r1, #1]
 8002698:	1c48      	addne	r0, r1, #1
 800269a:	bf08      	it	eq
 800269c:	1c88      	addeq	r0, r1, #2
 800269e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80026a2:	1e61      	subs	r1, r4, #1
 80026a4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80026a8:	42a9      	cmp	r1, r5
 80026aa:	d1fb      	bne.n	80026a4 <__sccl+0x1c>
 80026ac:	b90b      	cbnz	r3, 80026b2 <__sccl+0x2a>
 80026ae:	3801      	subs	r0, #1
 80026b0:	bd70      	pop	{r4, r5, r6, pc}
 80026b2:	f082 0201 	eor.w	r2, r2, #1
 80026b6:	4605      	mov	r5, r0
 80026b8:	54e2      	strb	r2, [r4, r3]
 80026ba:	4628      	mov	r0, r5
 80026bc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80026c0:	292d      	cmp	r1, #45	; 0x2d
 80026c2:	d006      	beq.n	80026d2 <__sccl+0x4a>
 80026c4:	295d      	cmp	r1, #93	; 0x5d
 80026c6:	d0f3      	beq.n	80026b0 <__sccl+0x28>
 80026c8:	b909      	cbnz	r1, 80026ce <__sccl+0x46>
 80026ca:	4628      	mov	r0, r5
 80026cc:	e7f0      	b.n	80026b0 <__sccl+0x28>
 80026ce:	460b      	mov	r3, r1
 80026d0:	e7f1      	b.n	80026b6 <__sccl+0x2e>
 80026d2:	786e      	ldrb	r6, [r5, #1]
 80026d4:	2e5d      	cmp	r6, #93	; 0x5d
 80026d6:	d0fa      	beq.n	80026ce <__sccl+0x46>
 80026d8:	42b3      	cmp	r3, r6
 80026da:	dcf8      	bgt.n	80026ce <__sccl+0x46>
 80026dc:	4619      	mov	r1, r3
 80026de:	3502      	adds	r5, #2
 80026e0:	3101      	adds	r1, #1
 80026e2:	428e      	cmp	r6, r1
 80026e4:	5462      	strb	r2, [r4, r1]
 80026e6:	dcfb      	bgt.n	80026e0 <__sccl+0x58>
 80026e8:	1af1      	subs	r1, r6, r3
 80026ea:	3901      	subs	r1, #1
 80026ec:	42b3      	cmp	r3, r6
 80026ee:	bfa8      	it	ge
 80026f0:	2100      	movge	r1, #0
 80026f2:	1c58      	adds	r0, r3, #1
 80026f4:	1843      	adds	r3, r0, r1
 80026f6:	e7e0      	b.n	80026ba <__sccl+0x32>

080026f8 <_strtol_l.constprop.0>:
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026fe:	4680      	mov	r8, r0
 8002700:	d001      	beq.n	8002706 <_strtol_l.constprop.0+0xe>
 8002702:	2b24      	cmp	r3, #36	; 0x24
 8002704:	d906      	bls.n	8002714 <_strtol_l.constprop.0+0x1c>
 8002706:	f7ff f929 	bl	800195c <__errno>
 800270a:	2316      	movs	r3, #22
 800270c:	6003      	str	r3, [r0, #0]
 800270e:	2000      	movs	r0, #0
 8002710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002714:	460d      	mov	r5, r1
 8002716:	4f35      	ldr	r7, [pc, #212]	; (80027ec <_strtol_l.constprop.0+0xf4>)
 8002718:	4628      	mov	r0, r5
 800271a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800271e:	5de6      	ldrb	r6, [r4, r7]
 8002720:	f016 0608 	ands.w	r6, r6, #8
 8002724:	d1f8      	bne.n	8002718 <_strtol_l.constprop.0+0x20>
 8002726:	2c2d      	cmp	r4, #45	; 0x2d
 8002728:	d12f      	bne.n	800278a <_strtol_l.constprop.0+0x92>
 800272a:	2601      	movs	r6, #1
 800272c:	782c      	ldrb	r4, [r5, #0]
 800272e:	1c85      	adds	r5, r0, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d057      	beq.n	80027e4 <_strtol_l.constprop.0+0xec>
 8002734:	2b10      	cmp	r3, #16
 8002736:	d109      	bne.n	800274c <_strtol_l.constprop.0+0x54>
 8002738:	2c30      	cmp	r4, #48	; 0x30
 800273a:	d107      	bne.n	800274c <_strtol_l.constprop.0+0x54>
 800273c:	7828      	ldrb	r0, [r5, #0]
 800273e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002742:	2858      	cmp	r0, #88	; 0x58
 8002744:	d149      	bne.n	80027da <_strtol_l.constprop.0+0xe2>
 8002746:	2310      	movs	r3, #16
 8002748:	786c      	ldrb	r4, [r5, #1]
 800274a:	3502      	adds	r5, #2
 800274c:	2700      	movs	r7, #0
 800274e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8002752:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002756:	fbbe f9f3 	udiv	r9, lr, r3
 800275a:	4638      	mov	r0, r7
 800275c:	fb03 ea19 	mls	sl, r3, r9, lr
 8002760:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002764:	f1bc 0f09 	cmp.w	ip, #9
 8002768:	d814      	bhi.n	8002794 <_strtol_l.constprop.0+0x9c>
 800276a:	4664      	mov	r4, ip
 800276c:	42a3      	cmp	r3, r4
 800276e:	dd22      	ble.n	80027b6 <_strtol_l.constprop.0+0xbe>
 8002770:	2f00      	cmp	r7, #0
 8002772:	db1d      	blt.n	80027b0 <_strtol_l.constprop.0+0xb8>
 8002774:	4581      	cmp	r9, r0
 8002776:	d31b      	bcc.n	80027b0 <_strtol_l.constprop.0+0xb8>
 8002778:	d101      	bne.n	800277e <_strtol_l.constprop.0+0x86>
 800277a:	45a2      	cmp	sl, r4
 800277c:	db18      	blt.n	80027b0 <_strtol_l.constprop.0+0xb8>
 800277e:	2701      	movs	r7, #1
 8002780:	fb00 4003 	mla	r0, r0, r3, r4
 8002784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002788:	e7ea      	b.n	8002760 <_strtol_l.constprop.0+0x68>
 800278a:	2c2b      	cmp	r4, #43	; 0x2b
 800278c:	bf04      	itt	eq
 800278e:	782c      	ldrbeq	r4, [r5, #0]
 8002790:	1c85      	addeq	r5, r0, #2
 8002792:	e7cd      	b.n	8002730 <_strtol_l.constprop.0+0x38>
 8002794:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002798:	f1bc 0f19 	cmp.w	ip, #25
 800279c:	d801      	bhi.n	80027a2 <_strtol_l.constprop.0+0xaa>
 800279e:	3c37      	subs	r4, #55	; 0x37
 80027a0:	e7e4      	b.n	800276c <_strtol_l.constprop.0+0x74>
 80027a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80027a6:	f1bc 0f19 	cmp.w	ip, #25
 80027aa:	d804      	bhi.n	80027b6 <_strtol_l.constprop.0+0xbe>
 80027ac:	3c57      	subs	r4, #87	; 0x57
 80027ae:	e7dd      	b.n	800276c <_strtol_l.constprop.0+0x74>
 80027b0:	f04f 37ff 	mov.w	r7, #4294967295
 80027b4:	e7e6      	b.n	8002784 <_strtol_l.constprop.0+0x8c>
 80027b6:	2f00      	cmp	r7, #0
 80027b8:	da07      	bge.n	80027ca <_strtol_l.constprop.0+0xd2>
 80027ba:	2322      	movs	r3, #34	; 0x22
 80027bc:	4670      	mov	r0, lr
 80027be:	f8c8 3000 	str.w	r3, [r8]
 80027c2:	2a00      	cmp	r2, #0
 80027c4:	d0a4      	beq.n	8002710 <_strtol_l.constprop.0+0x18>
 80027c6:	1e69      	subs	r1, r5, #1
 80027c8:	e005      	b.n	80027d6 <_strtol_l.constprop.0+0xde>
 80027ca:	b106      	cbz	r6, 80027ce <_strtol_l.constprop.0+0xd6>
 80027cc:	4240      	negs	r0, r0
 80027ce:	2a00      	cmp	r2, #0
 80027d0:	d09e      	beq.n	8002710 <_strtol_l.constprop.0+0x18>
 80027d2:	2f00      	cmp	r7, #0
 80027d4:	d1f7      	bne.n	80027c6 <_strtol_l.constprop.0+0xce>
 80027d6:	6011      	str	r1, [r2, #0]
 80027d8:	e79a      	b.n	8002710 <_strtol_l.constprop.0+0x18>
 80027da:	2430      	movs	r4, #48	; 0x30
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1b5      	bne.n	800274c <_strtol_l.constprop.0+0x54>
 80027e0:	2308      	movs	r3, #8
 80027e2:	e7b3      	b.n	800274c <_strtol_l.constprop.0+0x54>
 80027e4:	2c30      	cmp	r4, #48	; 0x30
 80027e6:	d0a9      	beq.n	800273c <_strtol_l.constprop.0+0x44>
 80027e8:	230a      	movs	r3, #10
 80027ea:	e7af      	b.n	800274c <_strtol_l.constprop.0+0x54>
 80027ec:	08002d71 	.word	0x08002d71

080027f0 <_strtol_r>:
 80027f0:	f7ff bf82 	b.w	80026f8 <_strtol_l.constprop.0>

080027f4 <_strtoul_l.constprop.0>:
 80027f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027f8:	4686      	mov	lr, r0
 80027fa:	460d      	mov	r5, r1
 80027fc:	4f35      	ldr	r7, [pc, #212]	; (80028d4 <_strtoul_l.constprop.0+0xe0>)
 80027fe:	4628      	mov	r0, r5
 8002800:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002804:	5de6      	ldrb	r6, [r4, r7]
 8002806:	f016 0608 	ands.w	r6, r6, #8
 800280a:	d1f8      	bne.n	80027fe <_strtoul_l.constprop.0+0xa>
 800280c:	2c2d      	cmp	r4, #45	; 0x2d
 800280e:	d12f      	bne.n	8002870 <_strtoul_l.constprop.0+0x7c>
 8002810:	2601      	movs	r6, #1
 8002812:	782c      	ldrb	r4, [r5, #0]
 8002814:	1c85      	adds	r5, r0, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d057      	beq.n	80028ca <_strtoul_l.constprop.0+0xd6>
 800281a:	2b10      	cmp	r3, #16
 800281c:	d109      	bne.n	8002832 <_strtoul_l.constprop.0+0x3e>
 800281e:	2c30      	cmp	r4, #48	; 0x30
 8002820:	d107      	bne.n	8002832 <_strtoul_l.constprop.0+0x3e>
 8002822:	7828      	ldrb	r0, [r5, #0]
 8002824:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002828:	2858      	cmp	r0, #88	; 0x58
 800282a:	d149      	bne.n	80028c0 <_strtoul_l.constprop.0+0xcc>
 800282c:	2310      	movs	r3, #16
 800282e:	786c      	ldrb	r4, [r5, #1]
 8002830:	3502      	adds	r5, #2
 8002832:	f04f 38ff 	mov.w	r8, #4294967295
 8002836:	fbb8 f8f3 	udiv	r8, r8, r3
 800283a:	2700      	movs	r7, #0
 800283c:	fb03 f908 	mul.w	r9, r3, r8
 8002840:	4638      	mov	r0, r7
 8002842:	ea6f 0909 	mvn.w	r9, r9
 8002846:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800284a:	f1bc 0f09 	cmp.w	ip, #9
 800284e:	d814      	bhi.n	800287a <_strtoul_l.constprop.0+0x86>
 8002850:	4664      	mov	r4, ip
 8002852:	42a3      	cmp	r3, r4
 8002854:	dd22      	ble.n	800289c <_strtoul_l.constprop.0+0xa8>
 8002856:	2f00      	cmp	r7, #0
 8002858:	db1d      	blt.n	8002896 <_strtoul_l.constprop.0+0xa2>
 800285a:	4580      	cmp	r8, r0
 800285c:	d31b      	bcc.n	8002896 <_strtoul_l.constprop.0+0xa2>
 800285e:	d101      	bne.n	8002864 <_strtoul_l.constprop.0+0x70>
 8002860:	45a1      	cmp	r9, r4
 8002862:	db18      	blt.n	8002896 <_strtoul_l.constprop.0+0xa2>
 8002864:	2701      	movs	r7, #1
 8002866:	fb00 4003 	mla	r0, r0, r3, r4
 800286a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800286e:	e7ea      	b.n	8002846 <_strtoul_l.constprop.0+0x52>
 8002870:	2c2b      	cmp	r4, #43	; 0x2b
 8002872:	bf04      	itt	eq
 8002874:	782c      	ldrbeq	r4, [r5, #0]
 8002876:	1c85      	addeq	r5, r0, #2
 8002878:	e7cd      	b.n	8002816 <_strtoul_l.constprop.0+0x22>
 800287a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800287e:	f1bc 0f19 	cmp.w	ip, #25
 8002882:	d801      	bhi.n	8002888 <_strtoul_l.constprop.0+0x94>
 8002884:	3c37      	subs	r4, #55	; 0x37
 8002886:	e7e4      	b.n	8002852 <_strtoul_l.constprop.0+0x5e>
 8002888:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800288c:	f1bc 0f19 	cmp.w	ip, #25
 8002890:	d804      	bhi.n	800289c <_strtoul_l.constprop.0+0xa8>
 8002892:	3c57      	subs	r4, #87	; 0x57
 8002894:	e7dd      	b.n	8002852 <_strtoul_l.constprop.0+0x5e>
 8002896:	f04f 37ff 	mov.w	r7, #4294967295
 800289a:	e7e6      	b.n	800286a <_strtoul_l.constprop.0+0x76>
 800289c:	2f00      	cmp	r7, #0
 800289e:	da07      	bge.n	80028b0 <_strtoul_l.constprop.0+0xbc>
 80028a0:	2322      	movs	r3, #34	; 0x22
 80028a2:	f04f 30ff 	mov.w	r0, #4294967295
 80028a6:	f8ce 3000 	str.w	r3, [lr]
 80028aa:	b932      	cbnz	r2, 80028ba <_strtoul_l.constprop.0+0xc6>
 80028ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028b0:	b106      	cbz	r6, 80028b4 <_strtoul_l.constprop.0+0xc0>
 80028b2:	4240      	negs	r0, r0
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d0f9      	beq.n	80028ac <_strtoul_l.constprop.0+0xb8>
 80028b8:	b107      	cbz	r7, 80028bc <_strtoul_l.constprop.0+0xc8>
 80028ba:	1e69      	subs	r1, r5, #1
 80028bc:	6011      	str	r1, [r2, #0]
 80028be:	e7f5      	b.n	80028ac <_strtoul_l.constprop.0+0xb8>
 80028c0:	2430      	movs	r4, #48	; 0x30
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1b5      	bne.n	8002832 <_strtoul_l.constprop.0+0x3e>
 80028c6:	2308      	movs	r3, #8
 80028c8:	e7b3      	b.n	8002832 <_strtoul_l.constprop.0+0x3e>
 80028ca:	2c30      	cmp	r4, #48	; 0x30
 80028cc:	d0a9      	beq.n	8002822 <_strtoul_l.constprop.0+0x2e>
 80028ce:	230a      	movs	r3, #10
 80028d0:	e7af      	b.n	8002832 <_strtoul_l.constprop.0+0x3e>
 80028d2:	bf00      	nop
 80028d4:	08002d71 	.word	0x08002d71

080028d8 <_strtoul_r>:
 80028d8:	f7ff bf8c 	b.w	80027f4 <_strtoul_l.constprop.0>

080028dc <__submore>:
 80028dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028e0:	460c      	mov	r4, r1
 80028e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80028e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028e8:	4299      	cmp	r1, r3
 80028ea:	d11b      	bne.n	8002924 <__submore+0x48>
 80028ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028f0:	f000 f8cc 	bl	8002a8c <_malloc_r>
 80028f4:	b918      	cbnz	r0, 80028fe <__submore+0x22>
 80028f6:	f04f 30ff 	mov.w	r0, #4294967295
 80028fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002902:	63a3      	str	r3, [r4, #56]	; 0x38
 8002904:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002908:	6360      	str	r0, [r4, #52]	; 0x34
 800290a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800290e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002912:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8002916:	7043      	strb	r3, [r0, #1]
 8002918:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800291c:	7003      	strb	r3, [r0, #0]
 800291e:	6020      	str	r0, [r4, #0]
 8002920:	2000      	movs	r0, #0
 8002922:	e7ea      	b.n	80028fa <__submore+0x1e>
 8002924:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002926:	0077      	lsls	r7, r6, #1
 8002928:	463a      	mov	r2, r7
 800292a:	f000 f923 	bl	8002b74 <_realloc_r>
 800292e:	4605      	mov	r5, r0
 8002930:	2800      	cmp	r0, #0
 8002932:	d0e0      	beq.n	80028f6 <__submore+0x1a>
 8002934:	eb00 0806 	add.w	r8, r0, r6
 8002938:	4601      	mov	r1, r0
 800293a:	4632      	mov	r2, r6
 800293c:	4640      	mov	r0, r8
 800293e:	f000 f815 	bl	800296c <memcpy>
 8002942:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8002946:	f8c4 8000 	str.w	r8, [r4]
 800294a:	e7e9      	b.n	8002920 <__submore+0x44>

0800294c <__retarget_lock_acquire_recursive>:
 800294c:	4770      	bx	lr

0800294e <__retarget_lock_release_recursive>:
 800294e:	4770      	bx	lr

08002950 <memchr>:
 8002950:	4603      	mov	r3, r0
 8002952:	b510      	push	{r4, lr}
 8002954:	b2c9      	uxtb	r1, r1
 8002956:	4402      	add	r2, r0
 8002958:	4293      	cmp	r3, r2
 800295a:	4618      	mov	r0, r3
 800295c:	d101      	bne.n	8002962 <memchr+0x12>
 800295e:	2000      	movs	r0, #0
 8002960:	e003      	b.n	800296a <memchr+0x1a>
 8002962:	7804      	ldrb	r4, [r0, #0]
 8002964:	3301      	adds	r3, #1
 8002966:	428c      	cmp	r4, r1
 8002968:	d1f6      	bne.n	8002958 <memchr+0x8>
 800296a:	bd10      	pop	{r4, pc}

0800296c <memcpy>:
 800296c:	440a      	add	r2, r1
 800296e:	4291      	cmp	r1, r2
 8002970:	f100 33ff 	add.w	r3, r0, #4294967295
 8002974:	d100      	bne.n	8002978 <memcpy+0xc>
 8002976:	4770      	bx	lr
 8002978:	b510      	push	{r4, lr}
 800297a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800297e:	4291      	cmp	r1, r2
 8002980:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002984:	d1f9      	bne.n	800297a <memcpy+0xe>
 8002986:	bd10      	pop	{r4, pc}

08002988 <memmove>:
 8002988:	4288      	cmp	r0, r1
 800298a:	b510      	push	{r4, lr}
 800298c:	eb01 0402 	add.w	r4, r1, r2
 8002990:	d902      	bls.n	8002998 <memmove+0x10>
 8002992:	4284      	cmp	r4, r0
 8002994:	4623      	mov	r3, r4
 8002996:	d807      	bhi.n	80029a8 <memmove+0x20>
 8002998:	1e43      	subs	r3, r0, #1
 800299a:	42a1      	cmp	r1, r4
 800299c:	d008      	beq.n	80029b0 <memmove+0x28>
 800299e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029a6:	e7f8      	b.n	800299a <memmove+0x12>
 80029a8:	4601      	mov	r1, r0
 80029aa:	4402      	add	r2, r0
 80029ac:	428a      	cmp	r2, r1
 80029ae:	d100      	bne.n	80029b2 <memmove+0x2a>
 80029b0:	bd10      	pop	{r4, pc}
 80029b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029ba:	e7f7      	b.n	80029ac <memmove+0x24>

080029bc <_free_r>:
 80029bc:	b538      	push	{r3, r4, r5, lr}
 80029be:	4605      	mov	r5, r0
 80029c0:	2900      	cmp	r1, #0
 80029c2:	d040      	beq.n	8002a46 <_free_r+0x8a>
 80029c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029c8:	1f0c      	subs	r4, r1, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	bfb8      	it	lt
 80029ce:	18e4      	addlt	r4, r4, r3
 80029d0:	f000 f910 	bl	8002bf4 <__malloc_lock>
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <_free_r+0x8c>)
 80029d6:	6813      	ldr	r3, [r2, #0]
 80029d8:	b933      	cbnz	r3, 80029e8 <_free_r+0x2c>
 80029da:	6063      	str	r3, [r4, #4]
 80029dc:	6014      	str	r4, [r2, #0]
 80029de:	4628      	mov	r0, r5
 80029e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029e4:	f000 b90c 	b.w	8002c00 <__malloc_unlock>
 80029e8:	42a3      	cmp	r3, r4
 80029ea:	d908      	bls.n	80029fe <_free_r+0x42>
 80029ec:	6820      	ldr	r0, [r4, #0]
 80029ee:	1821      	adds	r1, r4, r0
 80029f0:	428b      	cmp	r3, r1
 80029f2:	bf01      	itttt	eq
 80029f4:	6819      	ldreq	r1, [r3, #0]
 80029f6:	685b      	ldreq	r3, [r3, #4]
 80029f8:	1809      	addeq	r1, r1, r0
 80029fa:	6021      	streq	r1, [r4, #0]
 80029fc:	e7ed      	b.n	80029da <_free_r+0x1e>
 80029fe:	461a      	mov	r2, r3
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	b10b      	cbz	r3, 8002a08 <_free_r+0x4c>
 8002a04:	42a3      	cmp	r3, r4
 8002a06:	d9fa      	bls.n	80029fe <_free_r+0x42>
 8002a08:	6811      	ldr	r1, [r2, #0]
 8002a0a:	1850      	adds	r0, r2, r1
 8002a0c:	42a0      	cmp	r0, r4
 8002a0e:	d10b      	bne.n	8002a28 <_free_r+0x6c>
 8002a10:	6820      	ldr	r0, [r4, #0]
 8002a12:	4401      	add	r1, r0
 8002a14:	1850      	adds	r0, r2, r1
 8002a16:	4283      	cmp	r3, r0
 8002a18:	6011      	str	r1, [r2, #0]
 8002a1a:	d1e0      	bne.n	80029de <_free_r+0x22>
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4401      	add	r1, r0
 8002a22:	6011      	str	r1, [r2, #0]
 8002a24:	6053      	str	r3, [r2, #4]
 8002a26:	e7da      	b.n	80029de <_free_r+0x22>
 8002a28:	d902      	bls.n	8002a30 <_free_r+0x74>
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	602b      	str	r3, [r5, #0]
 8002a2e:	e7d6      	b.n	80029de <_free_r+0x22>
 8002a30:	6820      	ldr	r0, [r4, #0]
 8002a32:	1821      	adds	r1, r4, r0
 8002a34:	428b      	cmp	r3, r1
 8002a36:	bf01      	itttt	eq
 8002a38:	6819      	ldreq	r1, [r3, #0]
 8002a3a:	685b      	ldreq	r3, [r3, #4]
 8002a3c:	1809      	addeq	r1, r1, r0
 8002a3e:	6021      	streq	r1, [r4, #0]
 8002a40:	6063      	str	r3, [r4, #4]
 8002a42:	6054      	str	r4, [r2, #4]
 8002a44:	e7cb      	b.n	80029de <_free_r+0x22>
 8002a46:	bd38      	pop	{r3, r4, r5, pc}
 8002a48:	2000014c 	.word	0x2000014c

08002a4c <sbrk_aligned>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	4e0e      	ldr	r6, [pc, #56]	; (8002a88 <sbrk_aligned+0x3c>)
 8002a50:	460c      	mov	r4, r1
 8002a52:	6831      	ldr	r1, [r6, #0]
 8002a54:	4605      	mov	r5, r0
 8002a56:	b911      	cbnz	r1, 8002a5e <sbrk_aligned+0x12>
 8002a58:	f000 f8bc 	bl	8002bd4 <_sbrk_r>
 8002a5c:	6030      	str	r0, [r6, #0]
 8002a5e:	4621      	mov	r1, r4
 8002a60:	4628      	mov	r0, r5
 8002a62:	f000 f8b7 	bl	8002bd4 <_sbrk_r>
 8002a66:	1c43      	adds	r3, r0, #1
 8002a68:	d00a      	beq.n	8002a80 <sbrk_aligned+0x34>
 8002a6a:	1cc4      	adds	r4, r0, #3
 8002a6c:	f024 0403 	bic.w	r4, r4, #3
 8002a70:	42a0      	cmp	r0, r4
 8002a72:	d007      	beq.n	8002a84 <sbrk_aligned+0x38>
 8002a74:	1a21      	subs	r1, r4, r0
 8002a76:	4628      	mov	r0, r5
 8002a78:	f000 f8ac 	bl	8002bd4 <_sbrk_r>
 8002a7c:	3001      	adds	r0, #1
 8002a7e:	d101      	bne.n	8002a84 <sbrk_aligned+0x38>
 8002a80:	f04f 34ff 	mov.w	r4, #4294967295
 8002a84:	4620      	mov	r0, r4
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
 8002a88:	20000150 	.word	0x20000150

08002a8c <_malloc_r>:
 8002a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a90:	1ccd      	adds	r5, r1, #3
 8002a92:	f025 0503 	bic.w	r5, r5, #3
 8002a96:	3508      	adds	r5, #8
 8002a98:	2d0c      	cmp	r5, #12
 8002a9a:	bf38      	it	cc
 8002a9c:	250c      	movcc	r5, #12
 8002a9e:	2d00      	cmp	r5, #0
 8002aa0:	4607      	mov	r7, r0
 8002aa2:	db01      	blt.n	8002aa8 <_malloc_r+0x1c>
 8002aa4:	42a9      	cmp	r1, r5
 8002aa6:	d905      	bls.n	8002ab4 <_malloc_r+0x28>
 8002aa8:	230c      	movs	r3, #12
 8002aaa:	2600      	movs	r6, #0
 8002aac:	603b      	str	r3, [r7, #0]
 8002aae:	4630      	mov	r0, r6
 8002ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ab4:	4e2e      	ldr	r6, [pc, #184]	; (8002b70 <_malloc_r+0xe4>)
 8002ab6:	f000 f89d 	bl	8002bf4 <__malloc_lock>
 8002aba:	6833      	ldr	r3, [r6, #0]
 8002abc:	461c      	mov	r4, r3
 8002abe:	bb34      	cbnz	r4, 8002b0e <_malloc_r+0x82>
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	4638      	mov	r0, r7
 8002ac4:	f7ff ffc2 	bl	8002a4c <sbrk_aligned>
 8002ac8:	1c43      	adds	r3, r0, #1
 8002aca:	4604      	mov	r4, r0
 8002acc:	d14d      	bne.n	8002b6a <_malloc_r+0xde>
 8002ace:	6834      	ldr	r4, [r6, #0]
 8002ad0:	4626      	mov	r6, r4
 8002ad2:	2e00      	cmp	r6, #0
 8002ad4:	d140      	bne.n	8002b58 <_malloc_r+0xcc>
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	4631      	mov	r1, r6
 8002ada:	4638      	mov	r0, r7
 8002adc:	eb04 0803 	add.w	r8, r4, r3
 8002ae0:	f000 f878 	bl	8002bd4 <_sbrk_r>
 8002ae4:	4580      	cmp	r8, r0
 8002ae6:	d13a      	bne.n	8002b5e <_malloc_r+0xd2>
 8002ae8:	6821      	ldr	r1, [r4, #0]
 8002aea:	3503      	adds	r5, #3
 8002aec:	1a6d      	subs	r5, r5, r1
 8002aee:	f025 0503 	bic.w	r5, r5, #3
 8002af2:	3508      	adds	r5, #8
 8002af4:	2d0c      	cmp	r5, #12
 8002af6:	bf38      	it	cc
 8002af8:	250c      	movcc	r5, #12
 8002afa:	4638      	mov	r0, r7
 8002afc:	4629      	mov	r1, r5
 8002afe:	f7ff ffa5 	bl	8002a4c <sbrk_aligned>
 8002b02:	3001      	adds	r0, #1
 8002b04:	d02b      	beq.n	8002b5e <_malloc_r+0xd2>
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	442b      	add	r3, r5
 8002b0a:	6023      	str	r3, [r4, #0]
 8002b0c:	e00e      	b.n	8002b2c <_malloc_r+0xa0>
 8002b0e:	6822      	ldr	r2, [r4, #0]
 8002b10:	1b52      	subs	r2, r2, r5
 8002b12:	d41e      	bmi.n	8002b52 <_malloc_r+0xc6>
 8002b14:	2a0b      	cmp	r2, #11
 8002b16:	d916      	bls.n	8002b46 <_malloc_r+0xba>
 8002b18:	1961      	adds	r1, r4, r5
 8002b1a:	42a3      	cmp	r3, r4
 8002b1c:	6025      	str	r5, [r4, #0]
 8002b1e:	bf18      	it	ne
 8002b20:	6059      	strne	r1, [r3, #4]
 8002b22:	6863      	ldr	r3, [r4, #4]
 8002b24:	bf08      	it	eq
 8002b26:	6031      	streq	r1, [r6, #0]
 8002b28:	5162      	str	r2, [r4, r5]
 8002b2a:	604b      	str	r3, [r1, #4]
 8002b2c:	4638      	mov	r0, r7
 8002b2e:	f104 060b 	add.w	r6, r4, #11
 8002b32:	f000 f865 	bl	8002c00 <__malloc_unlock>
 8002b36:	f026 0607 	bic.w	r6, r6, #7
 8002b3a:	1d23      	adds	r3, r4, #4
 8002b3c:	1af2      	subs	r2, r6, r3
 8002b3e:	d0b6      	beq.n	8002aae <_malloc_r+0x22>
 8002b40:	1b9b      	subs	r3, r3, r6
 8002b42:	50a3      	str	r3, [r4, r2]
 8002b44:	e7b3      	b.n	8002aae <_malloc_r+0x22>
 8002b46:	6862      	ldr	r2, [r4, #4]
 8002b48:	42a3      	cmp	r3, r4
 8002b4a:	bf0c      	ite	eq
 8002b4c:	6032      	streq	r2, [r6, #0]
 8002b4e:	605a      	strne	r2, [r3, #4]
 8002b50:	e7ec      	b.n	8002b2c <_malloc_r+0xa0>
 8002b52:	4623      	mov	r3, r4
 8002b54:	6864      	ldr	r4, [r4, #4]
 8002b56:	e7b2      	b.n	8002abe <_malloc_r+0x32>
 8002b58:	4634      	mov	r4, r6
 8002b5a:	6876      	ldr	r6, [r6, #4]
 8002b5c:	e7b9      	b.n	8002ad2 <_malloc_r+0x46>
 8002b5e:	230c      	movs	r3, #12
 8002b60:	4638      	mov	r0, r7
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	f000 f84c 	bl	8002c00 <__malloc_unlock>
 8002b68:	e7a1      	b.n	8002aae <_malloc_r+0x22>
 8002b6a:	6025      	str	r5, [r4, #0]
 8002b6c:	e7de      	b.n	8002b2c <_malloc_r+0xa0>
 8002b6e:	bf00      	nop
 8002b70:	2000014c 	.word	0x2000014c

08002b74 <_realloc_r>:
 8002b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b78:	4680      	mov	r8, r0
 8002b7a:	4614      	mov	r4, r2
 8002b7c:	460e      	mov	r6, r1
 8002b7e:	b921      	cbnz	r1, 8002b8a <_realloc_r+0x16>
 8002b80:	4611      	mov	r1, r2
 8002b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b86:	f7ff bf81 	b.w	8002a8c <_malloc_r>
 8002b8a:	b92a      	cbnz	r2, 8002b98 <_realloc_r+0x24>
 8002b8c:	f7ff ff16 	bl	80029bc <_free_r>
 8002b90:	4625      	mov	r5, r4
 8002b92:	4628      	mov	r0, r5
 8002b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b98:	f000 f838 	bl	8002c0c <_malloc_usable_size_r>
 8002b9c:	4284      	cmp	r4, r0
 8002b9e:	4607      	mov	r7, r0
 8002ba0:	d802      	bhi.n	8002ba8 <_realloc_r+0x34>
 8002ba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002ba6:	d812      	bhi.n	8002bce <_realloc_r+0x5a>
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4640      	mov	r0, r8
 8002bac:	f7ff ff6e 	bl	8002a8c <_malloc_r>
 8002bb0:	4605      	mov	r5, r0
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	d0ed      	beq.n	8002b92 <_realloc_r+0x1e>
 8002bb6:	42bc      	cmp	r4, r7
 8002bb8:	4622      	mov	r2, r4
 8002bba:	4631      	mov	r1, r6
 8002bbc:	bf28      	it	cs
 8002bbe:	463a      	movcs	r2, r7
 8002bc0:	f7ff fed4 	bl	800296c <memcpy>
 8002bc4:	4631      	mov	r1, r6
 8002bc6:	4640      	mov	r0, r8
 8002bc8:	f7ff fef8 	bl	80029bc <_free_r>
 8002bcc:	e7e1      	b.n	8002b92 <_realloc_r+0x1e>
 8002bce:	4635      	mov	r5, r6
 8002bd0:	e7df      	b.n	8002b92 <_realloc_r+0x1e>
	...

08002bd4 <_sbrk_r>:
 8002bd4:	b538      	push	{r3, r4, r5, lr}
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	4d05      	ldr	r5, [pc, #20]	; (8002bf0 <_sbrk_r+0x1c>)
 8002bda:	4604      	mov	r4, r0
 8002bdc:	4608      	mov	r0, r1
 8002bde:	602b      	str	r3, [r5, #0]
 8002be0:	f7fd fcca 	bl	8000578 <_sbrk>
 8002be4:	1c43      	adds	r3, r0, #1
 8002be6:	d102      	bne.n	8002bee <_sbrk_r+0x1a>
 8002be8:	682b      	ldr	r3, [r5, #0]
 8002bea:	b103      	cbz	r3, 8002bee <_sbrk_r+0x1a>
 8002bec:	6023      	str	r3, [r4, #0]
 8002bee:	bd38      	pop	{r3, r4, r5, pc}
 8002bf0:	20000144 	.word	0x20000144

08002bf4 <__malloc_lock>:
 8002bf4:	4801      	ldr	r0, [pc, #4]	; (8002bfc <__malloc_lock+0x8>)
 8002bf6:	f7ff bea9 	b.w	800294c <__retarget_lock_acquire_recursive>
 8002bfa:	bf00      	nop
 8002bfc:	20000148 	.word	0x20000148

08002c00 <__malloc_unlock>:
 8002c00:	4801      	ldr	r0, [pc, #4]	; (8002c08 <__malloc_unlock+0x8>)
 8002c02:	f7ff bea4 	b.w	800294e <__retarget_lock_release_recursive>
 8002c06:	bf00      	nop
 8002c08:	20000148 	.word	0x20000148

08002c0c <_malloc_usable_size_r>:
 8002c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c10:	1f18      	subs	r0, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bfbc      	itt	lt
 8002c16:	580b      	ldrlt	r3, [r1, r0]
 8002c18:	18c0      	addlt	r0, r0, r3
 8002c1a:	4770      	bx	lr

08002c1c <_init>:
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	bf00      	nop
 8002c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c22:	bc08      	pop	{r3}
 8002c24:	469e      	mov	lr, r3
 8002c26:	4770      	bx	lr

08002c28 <_fini>:
 8002c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2a:	bf00      	nop
 8002c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2e:	bc08      	pop	{r3}
 8002c30:	469e      	mov	lr, r3
 8002c32:	4770      	bx	lr
